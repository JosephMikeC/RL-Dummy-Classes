/*******************************************************************************
 * _Types_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class _Types_TA extends Object
    abstract
    native;

const MAX_DISPLAY_PLAYER_TITLES = 16;

enum EPlayerTitleSource
{
    PTS_Unofficial,
    PTS_Official,
    PTS_MAX
};

enum SearchStatusOwner
{
    StatusOwner_None,
    StatusOwner_Matchmaking,
    StatusOwner_PrivateMatch,
    StatusOwner_MAX
};

enum EPaintTeam
{
    PaintTeam_Blue,
    PaintTeam_Orange,
    PaintTeam_None,
    PaintTeam_MAX
};

enum EVoiceFilter
{
    VoiceFilter_All,
    VoiceFilter_Team,
    VoiceFilter_Friends,
    VoiceFilter_None,
    VoiceFilter_MAX
};

enum EUnlockMethod
{
    UnlockMethod_Default,
    UnlockMethod_Drop,
    UnlockMethod_Special,
    UnlockMethod_Reward,
    UnlockMethod_DLC,
    UnlockMethod_MAX
};

enum EDemolishTarget
{
    DemolishTarget_OtherTeam,
    DemolishTarget_Everyone,
    DemolishTarget_None,
    DemolishTarget_MAX
};

enum EDemolishSpeed
{
    DemolishSpeed_Supersonic,
    DemolishSpeed_None,
    DemolishSpeed_MAX
};

enum ECarMod
{
    CarMod_DriveMaxSpeedAdd,
    CarMod_DriveEngineTorqueScale,
    CarMod_DriveBrakeTorqueScale,
    CarMod_BoostForceScale,
    CarMod_BoostMaxAmountScale,
    CarMod_MAX
};

enum ETutorialType
{
    T_Aerial,
    T_Goalie,
    T_Striker,
    T_Obstacle,
    T_FreePlay,
    T_Advanced,
    T_MAX
};

enum EDifficulty
{
    D_Easy,
    D_Medium,
    D_Hard,
    D_MAX
};

enum EVoteStatus
{
    VOTE_Pending,
    VOTE_Yes,
    VOTE_No,
    VOTE_MAX
};

enum ETAStatType
{
    StatType_Private,
    StatType_Unranked,
    StatType_Ranked,
    StatType_MAX
};

enum EProductAttachmentSocket
{
    PAS_Hat,
    PAS_Front,
    PAS_Antenna,
    PAS_MAX
};

enum EMirrorFieldType
{
    MFT_None,
    MFT_X,
    MFT_Y,
    MFT_XY,
    MFT_MAX
};

struct PlayerTitleDataSet
{
    var int Titles[16];
    var int Count;
};

struct UISavedKeyValue
{
    var databinding name Key;
    var databinding string Value;

};

struct DemolishData
{
    var Car_TA Attacker;
    var Car_TA Victim;
    var vector AttackerVelocity;
    var vector VictimVelocity;

};

struct ProductStat
{
    var int ProductID;
    var int Value;

    structdefaultproperties
    {
        // Object Offset:0x025C8E97
        ProductID=0
        Value=0
    }
};

struct ProfileCameraSettings
{
    var float FOV;
    var float Height;
    var float Pitch;
    var float Distance;
    var float Stiffness;
    var float SwivelSpeed;

};

struct native ReplayHeaderLoadResult
{
    var Replay_TA Header;
    var Error_X Error;
};

struct SeasonTeamRank
{
    var databinding int Team;
    var databinding int Wins;
    var databinding int Losses;
    var databinding int PointsFor;
    var databinding int PointsAgainst;
    var databinding int PointsDifferential;
    var databinding int EliminationWeek;
 
};

struct SeasonPlayer
{
    // Which team this player belongs to
    var databinding int Team;

    // Player's name
    var databinding string Name;
    
    // Players ID
    var databinding string Id;
    
    // Bot or human?
    var databinding bool bBot;


};

struct SeasonPlayerStat
{
    /** Players Index */
    var databinding int PlayerIndex;

    // Stat Name
    var databinding string StatName;

    // Stat Value
    var databinding int StatValue;

   
};

struct SeasonTeam
{
    /** Team's name */
    var databinding string Name;
    
    // Team's logo (name of logo asset, not texture path)
    var databinding name LogoAsset;
    
    // Week when this team got eliminated from playoffs
    var databinding int EliminationWeek;

};

struct SeasonMatch
{
    /** Which week this match will take place */
    var databinding int Week;
    // The two teams playing in this match. -1 if not determined yet
    var databinding int Team0;
    var databinding int Team1;

    // Final score of the match. 0 if not played yet.
    var databinding int Score0;
    var databinding int Score1;

    // Who won this match. -1 if it hasn't been played yet.
    var databinding int Winner;
    var bool bBye;

};

struct native TurningCircle
{
    var vector Center;
    var float Radius;

 
};

struct CycleButtonItem
{
    /** Value to display to user */
    var() string Label;
    // Value used internally
    var() string Value;

};

struct native InputRate
{
    var() float RiseRate;
    var() float FallRate;

};

struct native ThumbnailComponent
{
    var export editinline ActorComponent Component;
    var Matrix BaseTransform;
    var name Tag;

};

struct native StoredProductData
{
    /** Product data stored on disk. Avoid direct object references to speed up loading and GC ProductSlot we belong to */
    var() int SlotIndex;
    // name of the asset
    var() name Name;
    // This product must be equipped for us to be equipped
    var() int RequiredProductID;
    // The pack we belong to
    var() int PackID;
    // How we get unlocked
    var() EUnlockMethod UnlockMethod;
    // Cook for public builds
    var() bool bPublic;
    // This is a pack(folder) of products
    var() bool bPack;
    var bool bReplaced;
    var bool bDedicatedServerRelevant;

};

struct native ProductData
{
    var() int Id;
    var() ProductSlot_TA Slot;
    var() name Name;
    var() int RequiredProductID;
    var() EUnlockMethod UnlockMethod;
    var() bool bIsPack;

};

struct native RandomRange
{
    var() float Min;
    var() float Max;

};

struct TutorialScoreInfo
{
    var ETutorialType TutorialType;
    var EDifficulty Difficulty;
    var int Score;
    var int Redos;

};

struct native CarModSet
{
    var() float ModValues[ECarMod];

};

struct native CarModPair
{
    var ECarMod Mod;
    var float Value;
};

struct native LoadoutTeamPaint
{
    var byte Team;
    var byte TeamColorID;
    var int TeamFinishID;
    var byte CustomColorID;
    var int CustomFinishID;
    var bool bSet;

};

struct native ClientLoadoutData
{
    var array<int> Products;

};

struct native LoadoutData extends ClientLoadoutData
{
    var LoadoutTeamPaint TeamPaints[2];
};

struct native VehicleInputs
{
    var() float Throttle;
    var() float Steer;
    var() float Pitch;
    var() float Yaw;
    var() float Roll;
    var() bool bJump;
    var() bool bBoost;
    var() bool bHandbrake;

   
};

struct native MessageValue
{
    var string StringValue;
    var int IntValue;
    var Object ObjectValue;
    var name NameValue;
    var int ValueType;

};

struct native MessagePacket
{
    var const Message_TA Message;
    var const array<MessageValue> Values;

};

struct native BallHitInfo
{
    var PRI_TA PRI;
    var PRI_TA AttackerPRI;
    var name CarName;
    var int TeamNum;
    var ReplicatedRBState PreHitCarPhysics;
    var ReplicatedRBState PreHitBallPhysics;
    var ReplicatedRBState PostHitBallPhysics;
    var float Distance;
    var float Time;
    var vector HitLocation;
    var vector HitNormal;
    var bool bDodging;
    var bool bWheelsTouching;
	
	structdefaultproperties
    {
        PRI=none
        AttackerPRI=none
        CarName=None
        TeamNum=0
        PreHitCarPhysics=(Location=(X=0.0,Y=0.0,Z=0.0),Rotation=(Pitch=0,Yaw=0,Roll=0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),bSleeping=false,bNewData=false)
        PreHitBallPhysics=(Location=(X=0.0,Y=0.0,Z=0.0),Rotation=(Pitch=0,Yaw=0,Roll=0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),bSleeping=false,bNewData=false)
        PostHitBallPhysics=(Location=(X=0.0,Y=0.0,Z=0.0),Rotation=(Pitch=0,Yaw=0,Roll=0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),bSleeping=false,bNewData=false)
        Distance=0.0
        Time=0.0
        HitLocation=(X=0.0,Y=0.0,Z=0.0)
        HitNormal=(X=0.0,Y=0.0,Z=0.0)
        bDodging=false
        bWheelsTouching=false
    }
};

struct TAPlayerStat
{
    var StatEvent_TA StatEvent;
    var int Count;    
};

struct StatValue
{
    var name Id;
    var int Values[ETAStatType];
};

struct native AccumulatedRigidBodyCollision
{
    var Actor Actor;
    var export editinline PrimitiveComponent Component;
    var PhysicalMaterial PhysMat;
    var vector Velocity;
    var vector OtherVelocity;
    var vector Location;
    var vector Normal;
    var vector NormalForce;
    var vector FrictionForce;
    var vector NormalVelocity;
    var vector FrictionVelocity;
    var int NumCollisions;
    var int NumContacts;
};

struct native ProductAttachment
{
    var() StaticMesh StaticMesh;
    var() SkeletalMesh SkeletalMesh;
    var() MaterialInterface Material;
    var() float Scale;
    var() vector Translation;
    var() EProductAttachmentSocket Socket;
    var() export editinline AntennaComponent_TA Antenna;
    var() editinline array<editinline AttachmentBehavior_TA> Behaviors;
};

struct native WheelContactData
{
    var bool bHasContact;
    var bool bHasContactWithWorldGeometry;
    var float HasContactChangeTime;
    var Actor Actor;
    var export editinline PrimitiveComponent Component;
    var vector Location;
    var vector Normal;
    var vector LatDirection;
    var vector LongDirection;
    var PhysicalMaterialProperty_TA PhysMatProp;
};

struct native SimpleSpringSettings
{
    var() vector Strength;
    var() vector Damping;
    var() vector MaxDisplacement;
    var() float Mass;
    var() vector MassOffset;
    var() float MaxSpeed;
    var(Debug) bool bDebug;
    var(Debug) float DrawDebugOffset;
};

struct UIProductSlotData
{
    var() ProductSlot_TA Slot;
    var() Texture2D Texture;
    var() AkSoundCue Sound;
};

struct UICarModData
{
    var() ECarMod Mod;
    var() string Name;
    var() float MaxValue;
};

struct SimilarLogoGroup
{
    var() array<ProductAsset_Logo_TA> SimilarLogoColorAssets;
};

/*
var delegate<ProductLoadedDelegate> __ProductLoadedDelegate__Delegate;

private final delegate ProductLoadedDelegate(int ProductID, ProductAsset_TA Product)
{
    //return;    
}

static final function ClientLoadoutData ConvertToClientLoadout(LoadoutData FromData)
{ 
}

// Export U_Types_TA::execUpdateInputValue(FFrame&, void* const)
native static final function float UpdateInputValue(InputRate Rate, float DesiredValue, float OldValue, float DeltaTime)
{
    //native.Rate;
    //native.DesiredValue;
    //native.OldValue;
    //native.DeltaTime;        
}
*/