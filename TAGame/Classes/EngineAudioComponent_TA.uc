/*******************************************************************************
 * EngineAudioComponent_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class EngineAudioComponent_TA extends ActorComponent_X
 native;

struct native AudioMinMax
{
 var() float Min;
 var() float RandRange;

 structdefaultproperties
 {
     Min=0.0
     RandRange=0.0
 }
};

struct native AudioGear
{
 /** Random audio RPM range to shift down to */
 var() AudioMinMax RPMShiftDownRange;
 /** Random audio RPM range to shift up to */
 var() AudioMinMax RPMShiftUpRange;

 structdefaultproperties
 {
     RPMShiftDownRange=(Min=0.0,RandRange=0.0)
     RPMShiftUpRange=(Min=0.0,RandRange=0.0)
 }
};

struct native CarStateData
{
 var transient float Throttle;
 var transient float WheelSpeed;
 var transient float EngineRPM;
 var transient float EngineLoad;

 structdefaultproperties
 {
     Throttle=0.0
     WheelSpeed=0.0
     EngineRPM=0.0
     EngineLoad=0.0
 }
};

struct native EngineAudioNativeState
{
 var export editinline EngineAudioComponent_TA Component;
 var Vehicle_TA Car;
 var CarStateData CarState;

 structdefaultproperties
 {
     Component=none
     Car=none
     CarState=(Throttle=0.0,WheelSpeed=0.0,EngineRPM=0.0,EngineLoad=0.0)
 }
};

struct native EngineAudioNativeState_Clutched extends EngineAudioNativeState
{
 var bool bUsingRevLimiter;
};

struct native EngineAudioNativeState_OnGround extends EngineAudioNativeState
{
 var float GearSwitchTimeRemaining;
 var float RPMShiftUp;
 var float RPMShiftDown;
 var int Gear;
};

struct native EngineAudioNativeState_InAir extends EngineAudioNativeState_Clutched
{
 var float TimeInAir;
};

// TODO
/** Audio components */
//var() export editinline AkPlaySoundComponent EngineAudio;
/** Audio components */
//var() export editinline AkPlaySoundComponent ExhaustAudio;
/** Gears for adjusting shift ranges */
var() array<AudioGear> Gears;
/** How long it takes to change gears */
var() float GearSwitchTime;
/** Audio RPM ramps at AccelStart per second, increasing to AccelEnd when vehicle hits MaxWheelSpeed */
var() float RPMAccelStart;
/** Audio RPM ramps at AccelStart per second, increasing to AccelEnd when vehicle hits MaxWheelSpeed */
var() float RPMAccelEnd;
/** Acceleration for RPM when clutched */
var() float RPMAccelClutched;
/** Decceleration for RPM when clutched */
var() float RPMDecelClutched;
/** Max RPM when clutched */
var() float RPMMaxClutched;
/** Max car wheelspeed that we support */
var() float MaxWheelSpeed;
/** How much the change in wheelspeed affects RPM acceleration */
var() float RPMAccelFactor;
/** How quickly to decelerate the audio RPM when the vehicle is not throttling */
var() float RPMDecelFactor;
/** Increase RPM accel when boosting */
var() float RPMAccelBoostStart;
/** Increase RPM accel when boosting */
var() float RPMAccelBoostEnd;
/** Increase the RPM required for shifting up when boosting */
var() float RPMShiftUpBoost;
/** How much acceleration of the EngineRPM translates to 1.0 */
var() float RPMMaxLoad;
/** How much to smooth the transitioning of the AudioEngineLoad */
var() float EngineLoadSmoothFactor;
/** Cut off the car throttle once we've been in air for this long */
var() float AirMaxThrottleTime;
/** Turn on the rev limiter when we get this far above our gear's RPM */
var() float RevLimitRPM;
/** Decceleration for RPM when rev limited */
var() float RevLimitRPMDecel;
/** Rate at which we interpolate wheel speeds */
var() float WheelForwardSpeedInterpRate;
/** Rate at which we interpolate wheel speeds */
var() float WheelSideSpeedInterpRate;
var export editinline transient MaxActorsGroup_TA MaxActorsGroup;
var transient Vehicle_TA Car;
var transient CarStateData OldCarState;
var transient float AvgWheelForwardSpeed;
var transient float AvgWheelSideSpeed;
var native const transient Pointer NativeState;

protected event Attached() {}
protected event Detached() {}
private final function HandleEnabled() {}
private final function HandleDisabled() {}
private final function HandleSplitScreenTypeChanged(GameViewportClient_TA ViewportClient) {}

// Export UEngineAudioComponent_TA::execDestroyNativeState(FFrame&, void* const)
protected native final function DestroyNativeState();

// Export UEngineAudioComponent_TA::execGetNativeStateName(FFrame&, void* const)
protected native final function name GetNativeStateName();

simulated function PrintDebugInfo(DebugDrawer Drawer) {}