/*******************************************************************************
 * OnlineGame_Base_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class OnlineGame_Base_X extends Online_X
 abstract
 native;

var() string OnlineSubPlayerInterfaceName;
var() string OnlineSubGameInterfaceName;
/** Default game settings archetpe that all game   settings archetypes should inherit from Should specify all possible GameSettingCategories, but not set any This will eventually be used to drive the UI to show which options are available */
// Haven't added class yet.
//var() OnlineGameSettings_X DefaultGameSettingsArchetype;
var transient bool GameSettings;
/** Each game can only have one lobby active at a time In the case where the host of a party tries to connect to a server the Host lobby will stay up until the client lobby has successfully taken overvar transient OnlineGameLobby_X                                                    Lobby; Playlist manager that handles downloading playlists from the server */
//var() GetAPlayerController Playlists;
/** Analytics manager that handles uploading any game      info for tracking */
// Haven't added class yet.
//var() OnlineGameAnalytics_X Analytics;
//var OnlineImageDownloaderWeb_X ImageDownloader;
//var privatewrite transient OnlineGameDLC_X DLC;
//var() OnlineGameSettings_X GenericSettings;
var() PlaylistSkillRating Skill;
var() PlaylistTierSkillRating SkillGroups;
var() bool PlayerTitles;
var() protected const string StartServerCommand;
/** Remote config URL */
var() string OnlineConfigFileName;
/** How often to sync online config */
var() float OnlineConfigSyncDelay;
var transient bool bLockGameSettings;
var privatewrite transient byte CurrentConnectionStatus;
var protectedwrite transient string ServerName;
var protectedwrite transient string CachedOptions;
/*
var delegate<EventInternetConnectionChanged> __EventInternetConnectionChanged__Delegate;

delegate EventInternetConnectionChanged(bool bConnected)
{
 //return;    
}
*/  
/*
// Export UOnlineGame_Base_X::execGetInstance(FFrame&, void* const)
native static final function GetAPlayerController GetInstance(optional class Type);

protected function OnInit()
{
 InitOnlineSubsystemInterfaces();
 Playlists = Playlists.NewInstance(self);
 Playlists.Init(OnlineSub);
 Analytics = Analytics.NewInstance(self);
 Analytics.Init(OnlineSub);
 Skill = Skill.NewInstance(self);
 Skill.Init(OnlineSub);
 SkillGroups = SkillGroups.NewInstance(self);
 SkillGroups.Init(OnlineSub);
 PlayerTitles = PlayerTitles.NewInstance(self);
 PlayerTitles.Init(OnlineSub);
 ImageDownloader = new class'OnlineImageDownloaderWeb_X';
 DLC = new class'OnlineGameDLC_X';
 DLC.Init(OnlineSub);
 GenericSettings = new class'OnlineGameGenericSettings_X';
 GenericSettings.Init(OnlineSub);
 OnlineSub.SearchClass = class'OnlineGameSearch_X';
 SetDefaultSearchType(OnlineSub.SearchClass);
 CurrentConnectionStatus = OnlineSub.CurrentConnectionStatus;
 OnlineSub.SystemInterface.AddConnectionStatusChangeDelegate(HandleConnectionStatusChanged);
 OnlineSub.SystemInterface.AddLinkStatusChangeDelegate(HandleInternetConnectionChanged);
 UnknownLocal_144515090
 @NULL
 stop;
 @NULL
 stop;
 @NULL
 @NULL
 @NULL
 @NULL
 )
 LogInternal("Build Unique ID:" @ string(class'GameEngine'.static.GetOnlineSubsystem().GetBuildUniqueId()), 'Matchmaking');
}

protected function SyncOnlineConfig()
{
 local string OnlineConfigURL;

 switch(PsyWebServer.GetDBEnvironment())
 {
     // End:0x73
     case 3:
         OnlineConfigURL = (class'CDN_X'.default.ConfigURL $ "Production/") $ OnlineConfigFileName;
         // End:0xB2
         break;
     // End:0xFFFF
     default:
         OnlineConfigURL = (class'CDN_X'.default.ConfigURL $ "Test/") $ OnlineConfigFileName;
         class'WebRequest_X'.static.Create().Send(OnlineConfigURL, HandleOnlineConfig);
         //return;
 }    
}

protected function HandleOnlineConfig(class Request)
{
 local array Data;

 LogInternal(("HandleOnlineConfig" @ string(Request)) @ string(Request.Error));
 // End:0xE6
 if(!Request.IsError())
 {
     Request.HttpResponse.GetContent(Data);
     class'OnlineConfig_X'.static.GetInstance().SetEncryptedData(Data);
 }
 SetTimer(OnlineConfigSyncDelay, false, 'SyncOnlineConfig');
 //return;    
}

// Export UOnlineGame_Base_X::execInitOnlineSubsystemInterfaces(FFrame&, void* const)
private native final function InitOnlineSubsystemInterfaces();

function OnNewGameInfoCreated(GetLanguageExtension Game)
{
 //return;    
}

function GetAPlayerController CreateOnlineGameSettings(optional string Options)
{
 local Qword NewGameSettings;

 NewGameSettings = DefaultGameSettingsArchetype.NewInstance();
 NewGameSettings.Init();
 UpdateGameSettings(NewGameSettings, Options);
 return NewGameSettings;
 //return ReturnValue;    
}

function UpdateGameSettings(IsInTransientPackage InGameSettings, string Options)
{
 InGameSettings.bOffline = class'WorldInfo'.static.GetWorldInfo().NetMode == NM_Standalone;
 InGameSettings.UpdateFromURL(Options, class'WorldInfo'.static.GetWorldInfo().Game);
 //return;    
}

function UpdateGameSettingsPlayerCount(int NumPlayers)
{
 // End:0x35
 if((GameSettings == none) || GameSettings.bOffline)
 {
     return;
 }
 GameSettings.NumOpenPublicConnections = Max(GameSettings.NumPublicConnections - NumPlayers, 0);
 LogInternal((((string(self) @ "OpenSlots=") $ string(GameSettings.NumOpenPublicConnections)) @ "MaxSlots=") $ string(GameSettings.NumPublicConnections));
 //return;    
}

function OnNewSettingsChosen(int PlaylistId)
{
 local GetAPlayerController EngineShare;
 local GetUtcTimeInSeconds PlaylistCategory, SelectedPlaylist;
 local int NumPlayers;

 EngineShare = class'EngineShare_X'.static.GetInstance();
 PlaylistCategory = GameSettings.GetGameSettingCategoryByName('Playlists');
 PlaylistCategory.ClearSelected();
 SelectedPlaylist = Playlists.FindPlaylist(PlaylistId);
 NumPlayers = SelectedPlaylist.PlayerCount;
 GameSettings.NumPublicConnections = NumPlayers;
 GameSettings.SetGameTag(SelectedPlaylist.Name);
 // End:0x17D
 if(!EngineShare.bUseServerMatchmaking)
 {
     UpdateGameSettingsPlayerCount(NumPlayers);
     bLockGameSettings = true;
 }
 //return;    
}

protected function OnExit()
{
 OnlineSub.SystemInterface.ClearConnectionStatusChangeDelegate(HandleConnectionStatusChanged);
 super.OnExit();
 //return;    
}

final function DelayedShutdownServer()
{
 class'WorldInfo'.static.GetWorldInfo().ConsoleCommand("Quit");
 //return;    
}

final function KickAllPlayers()
{
 local Orientation PC;

 // End:0x17D
 foreach class'WorldInfo'.static.GetWorldInfo().AllControllers(class'PlayerController_X', PC)
 {
     LogInternal(" - kicking" @ string(PC));
     // End:0x122
     if(PC.PlayerReplicationInfo != none)
     {
         LogInternal(((" - - " @ PC.PlayerReplicationInfo.PlayerName) @ "UniqueID:") @ @UnknownCastToken(0x63));
         ,
         ,
         )
     }
     PC.KickPlayerForReason("OnlineErrors.OnlineServerConnectionErrors.ServerShutdown");        
 }    
 //return;    
}

protected final function string RemovePort(string InURL)
{
 local int Index;

 Index = InStr(InURL, ":");
 // End:0x3F
 if(Index >= 0)
 {
     return Left(InURL, Index);
 }
 return InURL;
 //return ReturnValue;    
}

protected final function bool IsPortZero(string InURL)
{
 local int Index, PortNo;

 Index = InStr(InURL, ":");
 // End:0x73
 if(Index >= 0)
 {
     PortNo = int(Mid(InURL, Index + 1, (Len(InURL) - Index) - 1));
     return PortNo == 0;
 }
 return true;
 //return ReturnValue;    
}

// Export UOnlineGame_Base_X::execSetDefaultSearchType(FFrame&, void* const)
private native final function SetDefaultSearchType(class OnlineSearchClass);

private final function HandleConnectionStatusChanged(byte ConnectionStatus)
{
 CurrentConnectionStatus = ((HasInternetConnection()) ? 1 : 0);
 EventInternetConnectionChanged(CurrentConnectionStatus == 1);
 //return;    
}

private final function HandleInternetConnectionChanged(bool bConnected)
{
 EventInternetConnectionChanged(bConnected);
 //return;    
}

// Export UOnlineGame_Base_X::execGetIPAddress(FFrame&, void* const)
native function string GetIPAddress(bool bWithPort);

final function bool HasInternetConnection()
{
 return OnlineSub.SystemInterface.HasLinkConnection();
 //return ReturnValue;    
}

simulated function PrintDebugInfo(GetAPlayerController Drawer)
{
 super(Object).PrintDebugInfo(Drawer);
 Drawer.PrintProperty("ConnectionStatus", string(CurrentConnectionStatus));
 //return;    
}
*/