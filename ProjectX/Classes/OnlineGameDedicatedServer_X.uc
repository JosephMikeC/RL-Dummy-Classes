/*******************************************************************************
 * OnlineGameDedicatedServer_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class OnlineGameDedicatedServer_X extends OnlineGame_Base_X
 native;

 // TODO
//var transient OnlineGameStats_X GameStats;
var() OnlineGameDedicatedServerRegistration_X Registration;
var() OnlineGameReservations_X Reservations;
var protectedwrite transient string Region;
var protectedwrite int CurrentPlaylistId;
var protectedwrite int MutatorIndex;
var protectedwrite transient float AverageMMR;
var() private const string FindNewDedicatedServerURL;
/** How often we send our FPS buckets to database */
var() float ReportFPSDelay;
var privatewrite transient int MachineId;
// Can't figure out types.
//var privatewrite transient GetAPlayerController CustomMatch;
//var privatewrite transient GetUtcTimeInSeconds CustomMatchOwner;
var privatewrite transient bool bQueuedShutdown;
var privatewrite transient bool bFindingReplacementServer;
var privatewrite transient bool bDisableMatchmakingBan;
var privatewrite transient string MatchGUID;

/*
var delegate<EventFoundNewDedicatedServerForPlayers> __EventFoundNewDedicatedServerForPlayers__Delegate;
var delegate<EventAverageMMRChanged> __EventAverageMMRChanged__Delegate;
var delegate<OnGetNextMapName> __OnGetNextMapName__Delegate;

delegate EventFoundNewDedicatedServerForPlayers(string NewIP)
{
 //return;    
}

delegate EventAverageMMRChanged(GetAPlayerController Server)
{
 //return;    
}

delegate name OnGetNextMapName(int GameMode)
{
 //return ReturnValue;    
}
*/
/*
protected function OnInit()
{
 local string Port;

 super.OnInit();
 // End:0xAD
 if(!class'EngineShare_X'.static.ParseCommandlineString("ServerName=", ServerName))
 {
     // End:0x88
     if(!class'EngineShare_X'.static.ParseCommandlineString("Port=", Port))
     {
         Port = "7777";
     }
     ServerName = "UnnamedServer-" $ Port;
 }
 // End:0xF5
 if(!class'EngineShare_X'.static.ParseCommandlineInt("MachineId=", MachineId))
 {
     MachineId = 50001;
 }
 // End:0x13A
 if(!class'EngineShare_X'.static.ParseCommandlineString("Region=", Region))
 {
     Region = "USW";
 }
 bDisableMatchmakingBan = class'EngineShare_X'.static.ParseCommandlineParam("NoBan");
 Registration = Registration.NewInstance(self);
 Registration.Init(OnlineSub);
 Reservations = Reservations.NewInstance(self);
 Reservations.Init(OnlineSub);
 UnknownLocal_242352409
 @NULL
 )
 @NULL
 )
 @NULL
 @NULL
 @NULL
 @NULL    
 class'OnlineGameStats_X'    
 UnknownLocal_214237465
 @NULL    ;
 NativeFunctionToken-FinalFunctionToken(System.NullReferenceException: Object reference not set to an instance of an object.
at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.PrecedenceToken(Token t)
at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileOperator(String operatorName)
at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile()
at UELib.Core.UStruct.UByteCodeDecompiler.Decompile())    
 @NULL
 @NULL
}

protected function HandleReservationsUpdated()
{
 // End:0x60
 if(Reservations.IsEmpty())
 {
     LogInternal("No Reservations, going inactive", 'Matchmaking');
     GotoState('Inactive');
 }
 // End:0x89
 else
 {
     UpdateAverageMMR();
     Registration.UpdateServer();
 }
 //return;    
}

function SetPlaylist(int PlaylistId)
{
 local GetDefaultObject Playlist;

 // End:0x4D
 if(!class'GameSettingPlaylist_X'.static.IsValidID(PlaylistId))
 {
     GameSettings = CreateOnlineGameSettings(CachedOptions);
 }
 // End:0x102
 else
 {
     Playlist = Playlists.FindPlaylist(PlaylistId);
     CurrentPlaylistId = Playlist.PlaylistId;
     GameSettings = CreateOnlineGameSettings(GetPlaylistTags());
     GameSettings.SetGameTag(Playlist.Name);
 }
 GameSettings.NumPublicConnections = Playlist.PlayerCount;
 GameSettings.NumOpenPublicConnections = Playlist.PlayerCount;
 GRI_X(class'WorldInfo'.static.GetWorldInfo().GRI).SetGameData(PlaylistId, MutatorIndex);
 //return;    
}

protected function ClearSettings()
{
 local GetUtcTimeInSeconds EmptyCustomMatch;
 local @NULL EmptyID;

 AverageMMR = 0.0;
 CurrentPlaylistId = default.CurrentPlaylistId;
 GameSettings = none;
 CustomMatchOwner = EmptyID;
 // End:0x98
 if(Len(string(CustomMatch.MapName)) > 0)
 {
     CustomMatch = EmptyCustomMatch;
     Registration.UpdateCustomGame();
 }
 Registration.UpdateServer();
 Reservations.Reset();
 Skill.Clear();
 //return;    
}

function UpdateAverageMMR()
{
 local int I;
 local float NewMMR;

 // End:0x105
 if(Reservations.Players.Length > 0)
 {
     I = 0;
     J0x30:
     // End:0xD9 [Loop If]
     if(I < Reservations.Players.Length)
     {
         NewMMR += Skill.GetPlayerMMR(Reservations.Players[I].PlayerID, CurrentPlaylistId);
         ++ I;
         // [Loop Continue]
         goto J0x30;
     }
     NewMMR /= float(Reservations.Players.Length);
 }
 // End:0x143
 if(NewMMR != AverageMMR)
 {
     AverageMMR = NewMMR;
     EventAverageMMRChanged(self);
 }
 //return;    
}

final function string GetPlaylistTags()
{
 local GetDefaultObject Playlist;
 local string PlaylistTags;
 local @NULL CurrentTag;

 Playlist = Playlists.FindPlaylist(CurrentPlaylistId);
 // End:0x179
 if(Playlist.PresetMutators.Length > 0)
 {
     // End:0x94
     if(MutatorIndex == 0)
     {
         MutatorIndex = Rand(Playlist.PresetMutators.Length) + 1;
     }
     // End:0x175
     foreach Playlist.PresetMutators[MutatorIndex % Playlist.PresetMutators.Length].PresetTags(CurrentTag,)
     {
         // End:0x12B
         if(PlaylistTags != "")
         {
             PlaylistTags $= ",";
         }
         // End:0x141
         else
         {
             PlaylistTags = "?GameTags=";
         }
         PlaylistTags $= string(CurrentTag.Setting);            
     }        
 }
 // End:0x184
 else
 {
     MutatorIndex = 0;
 }
 return PlaylistTags;
 //return ReturnValue;    
}

function GoToMap(string MapName)
{
 local string ServerCommand;

 ServerCommand = MapName;
 // End:0x5F
 if(class'EngineShare_X'.static.ParseCommandlineParam("FakeServer"))
 {
     ServerCommand $= CachedOptions;
 }
 TravelToMap(ServerCommand);
 //return;    
}

function name GetNextMutatorMapName()
{
 local GetDefaultObject Playlist;
 local int NextMutatorIndex;

 Playlist = Playlists.FindPlaylist(CurrentPlaylistId);
 NextMutatorIndex = (MutatorIndex + 1) % Playlist.PresetMutators.Length;
 // End:0x153
 if((Playlist.PresetMutators.Length > 0) && Playlist.PresetMutators[NextMutatorIndex].RequiresMaps.Length > 0)
 {
     return Playlist.PresetMutators[NextMutatorIndex].RequiresMaps[Rand(Playlist.PresetMutators[NextMutatorIndex].RequiresMaps.Length)];
 }
 return GetNextMapName();
 //return ReturnValue;    
}

function GoToNextMap()
{
 // End:0x35
 if(MutatorIndex == 0)
 {
     GoToMap(string(GetNextMapName()) $ GetStartServerCommand());
 }
 // End:0x57
 else
 {
     GoToMap(string(GetNextMutatorMapName()) $ GetStartServerCommand());
 }
 //return;    
}

function SetupPrivateMatch(GetDefaultObject Settings, @NULL Creator)
{
 CustomMatch = Settings;
 UpdateCustomMatchOwner(Creator);
 CurrentPlaylistId = Playlists.NameToID('PrivateMatch');
 Settings.GameTags $= (",PlayerCount" $ string(Settings.MaxPlayerCount));
 GameSettings = CreateOnlineGameSettings("?GameTags=" $ Settings.GameTags);
 GameSettings.NumPublicConnections = 8;
 GameSettings.NumOpenPublicConnections = 8;
 Registration.UpdateCustomGame();
 //return;    
}

function UpdateCustomMatchOwner(GetDefaultObject NewOwner)
{
 // End:0x54
 if(Reservations.Players.Find('PlayerID', NewOwner) != -1)
 {
     CustomMatchOwner = NewOwner;
 }
 // End:0x8E
 else
 {
     WarnInternal("Assigning a custom match owner that has no reservation");
 }
 //return;    
}

function GetCustomMatchSettings(out GetAPlayerController OutSettings)
{
 OutSettings = CustomMatch;
 //return;    
}

function name GetNextMapName(optional int GameMode)
{
 local GetDefaultObject Playlist;

 Playlist = Playlists.FindPlaylist(CurrentPlaylistId);
 // End:0x8F
 if((Playlist != none) && Playlist.MapName != 'None')
 {
     return Playlist.MapName;
 }
 return OnGetNextMapName(GameMode);
 //return ReturnValue;    
}

final function string GetStartServerCommand()
{
 local string ServerCommand;
 local GetDefaultObject Playlist;

 Playlist = Playlists.FindPlaylist(CurrentPlaylistId);
 ServerCommand = (((Playlist != none) && Playlist.ServerCommand != "") ? Playlist.ServerCommand : StartServerCommand);
 return ("?" $ ServerCommand) $ ((MutatorIndex != 0) ? "?MutatorIndex=" $ string(MutatorIndex) : "");
 //return ReturnValue;    
}

final function OnPrivateEventDestroyed()
{
 // End:0x32
 if(Reservations.Players.Length > 0)
 {
     GotoNextPrivateMatchMap();
 }
 // End:0x40
 else
 {
     GotoState('Inactive');
 }
 //return;    
}

function GotoNextPrivateMatchMap()
{
 GotoPrivateMatchMap(CustomMatch.MapName, CustomMatch.GameMode);
 //return;    
}

function GotoPrivateMatchMap(name MapName, int GameMode)
{
 //return;    
}

function TravelToMap(string ServerCommand)
{
 Reservations.SetServerTraveling(true);
 CreateMatchID();
 class'WorldInfo'.static.GetWorldInfo().NextURL = "";
 class'WorldInfo'.static.GetWorldInfo().ServerTravel(ServerCommand, true);
 //return;    
}

function OnNewGameInfoCreated(GetLanguageExtension Game)
{
 Reservations.SetServerTraveling(false);
 Reservations.OnNewGameInfoCreated(Game);
 // End:0xF0
 if(class'GameInfo'.static.HasOption(Game.ServerOptions, "MutatorIndex"))
 {
     MutatorIndex = int(class'GameInfo'.static.ParseOption(Game.ServerOptions, "MutatorIndex")) + 1;
 }
 super.OnNewGameInfoCreated(Game);
 //return;    
}

function bool AllowPlayerLogin(string Options, GetDefaultObject PlayerID)
{
 return Reservations.AllowPlayerLogin(Options, PlayerID);
 //return ReturnValue;    
}

function PlayerLoggedIn(string PRI)
{
 Reservations.PlayerLoggedIn(PRI);
 //return;    
}

function PlayerLoggedOut(string PRI)
{
 Reservations.PlayerLoggedOut(PRI);
 //return;    
}

function bool AllowSplitscreenJoin(class PrimaryPRI, GetDefaultObject PlayerID, string PlayerName)
{
 return Reservations.AllowSplitscreenJoin(PrimaryPRI, PlayerID, PlayerName);
 //return ReturnValue;    
}

function UpdateOnlineGame()
{
 Registration.UpdateServer();
 //return;    
}

function bool IsTravellingToNextMap()
{
 return class'WorldInfo'.static.GetWorldInfo().NextURL != "";
 //return ReturnValue;    
}

function bool IsInPostGameLobby()
{
 return false;
 //return ReturnValue;    
}

final function FindNewDedicatedServerForPlayers(delegate<class> InDelegate)
{
 UnknownLocal_943361
 @NULL
 @NULL
 NativeFunctionToken(ArgumentOutOfRangeException);
}

final function UpdateGameTime(int TimeSeconds)
{
 Registration.UpdateGameTime(TimeSeconds);
 CheckStartShutdown(TimeSeconds);
 //return;    
}

final function CheckStartShutdown(int GameTimeRemaining)
{
 // End:0x8F
 if((bQueuedShutdown && !bFindingReplacementServer) && GameTimeRemaining <= 30)
 {
     bFindingReplacementServer = true;
     Registration.SetServerNotJoinable();
     SetTimer(5.0, false, 'CheckNewServerIP');
     SetTimer(45.0, false, 'CheckNewServerTimeout');
 }
 //return;    
}

final function CheckNewServerTimeout()
{
 ClearTimer('CheckNewServerTimeout');
 LogInternal("Forcing the shutdown because it's taken too long");
 EventFoundNewDedicatedServerForPlayers("");
 //return;    
}

final function CheckNewServerIP()
{
 PsyWebServer.CreateQuery("FindNewDedicatedServer").SetDocument(FindNewDedicatedServerURL).AddQwordParam(Registration.GameServerID).Send(HandleNewServerIP);
 //return;    
}

private final function HandleNewServerIP(DumpUnreferencedAnims Query)
{
 local string NewBeaconAddress;

 // End:0x105
 if(!Query.IsError() && Query.Results.Length > 0)
 {
     NewBeaconAddress = Query.GetStringResult('IP');
     // End:0x105
     if(Len(NewBeaconAddress) > 0)
     {
         LogInternal((string(self) @ "Found New beacon address for dedicated server:") @ NewBeaconAddress);
         ClearTimer('CheckNewServerTimeout');
         EventFoundNewDedicatedServerForPlayers(NewBeaconAddress);
         return;
     }
 }
 SetTimer(2.0, false, 'CheckNewServerIP');
 //return;    
}

protected function OnExit()
{
 Registration.UnregisterServer();
 super.OnExit();
 //return;    
}

protected function ReportFPSBuckets()
{
 local class GameEngine;
 local int BucketIdx;
 local DumpUnreferencedAnims Query;

 // End:0x1AE
 if(Greater_QWordQWord(Registration.GameServerID, @UnknownCastToken(0x62), 0))
 {
     GameEngine = GameEngine_X(class'Engine'.static.GetEngine());
     Query = class'PsyWebServer_X'.static.GetInstance().CreateQuery("ReportFPSBuckets");
     Query.AddQwordParam(Registration.GameServerID);
     BucketIdx = 0;
     J0xF9:
     // End:0x18E [Loop If]
     if(BucketIdx < GameEngine.FPSBuckets.Length)
     {
         Query.AddIntParam(GameEngine.FPSBuckets[BucketIdx].Count);
         ++ BucketIdx;
         // [Loop Continue]
         goto J0xF9;
     }
     Query.Send();
 }
 //return;    
}

final function bool IsRankedMatch()
{
 return (CurrentPlaylistId > 0) && Playlists.FindPlaylist(CurrentPlaylistId).bRanked;
 //return ReturnValue;    
}

function IssueMatchmakingBan(GetDefaultObject PlayerID, string Reason)
{
 local string URL;

 // End:0x0F
 if(bDisableMatchmakingBan)
 {
     return;
 }
 LogInternal(("IssueMatchmakingBan" @ UniqueNetIdToString(PlayerID)) @ Reason);
 URL = PsyWebServer.GetWebRequestURL() $ "Matchmaking/AddQuitter/";
 PsyNet.CreateWebRequest().SetHeader("QuitterKey", PsyWebServer.SecretKeys.Quitter).AddPlayerIDParam("Player", PlayerID).AddStringParam("Reason", Reason).Send(URL);
 //return;    
}

function ClearMatchmakingBan(GetDefaultObject PlayerID)
{
 local string URL;

 // End:0x0F
 if(bDisableMatchmakingBan)
 {
     return;
 }
 URL = PsyWebServer.GetWebRequestURL() $ "Matchmaking/RemoveQuitter/";
 PsyNet.CreateWebRequest().SetHeader("QuitterKey", PsyWebServer.SecretKeys.Quitter).AddPlayerIDParam("Player", PlayerID).Send(URL);
 //return;    
}

function name GetCurrentMapName()
{
 return name(class'WorldInfo'.static.GetWorldInfo().GetMapName());
 //return ReturnValue;    
}

final function byte HandleWebRequestAuthorization()
{
 return 2;
 //return ReturnValue;    
}

protected function CreateMatchID()
{
 local @NULL NewMatchGuid;

 NewMatchGuid = CreateGuid();
 MatchGUID = GetStringFromGuid(NewMatchGuid);
 LogInternal("MatchGUID: " $ MatchGUID);
 //return;    
}

simulated function PrintDebugInfo(GetAPlayerController Drawer)
{
 super.PrintDebugInfo(Drawer);
 Drawer.DebugObject(string('Reservations'), Reservations);
 //return;    
}

auto state Initializing
{
 function OnNewGameInfoCreated(GetLanguageExtension Game)
 {
     super(OnlineGameDedicatedServer_X).OnNewGameInfoCreated(Game);
     CachedOptions = Game.ServerOptions;
     Registration.RegisterServer();
     GotoState('Inactive');
     // End:0xA5
     if(class'EngineShare_X'.static.ParseCommandlineParam("BotPerfTest"))
     {
         GotoState('BotTesting');
     }
     //return;        
 }
 stop;    
}

state Inactive
{
 ignores CreateMatchID;

 event BeginState(name P)
 {
     // End:0x95
     if(bQueuedShutdown)
     {
         LogInternal("bQueuedShutdown while entering InActive state, so just quit");
         class'WorldInfo'.static.GetWorldInfo().ConsoleCommand("Quit");
         return;
     }
     MatchGUID = "";
     ClearSettings();
     GoToMap("Inactive");
     GameEngine_X(class'Engine'.static.GetEngine()).SetRecordingFPSBuckets(false);
     ReportFPSBuckets();
     ClearTimer('ReportFPSBuckets');
     //return;        
 }

 event EndState(name N)
 {
     GameEngine_X(class'Engine'.static.GetEngine()).SetRecordingFPSBuckets(true);
     SetTimer(ReportFPSDelay, true, 'ReportFPSBuckets');
     //return;        
 }

 protected function HandleReservationsUpdated()
 {
     // End:0x5C
     if(Reservations.IsEmpty())
     {
         LogInternal("No Reservations, clearing settings", 'Matchmaking');
         ClearSettings();
     }
     //return;        
 }
 stop;    
}

state StartingPrivateMatch
{
 function OnNewGameInfoCreated(GetLanguageExtension Game)
 {
     global.OnNewGameInfoCreated(Game);
     LogInternal("OnlineGame Going to active state", 'PrivateMatch');
     GotoState('Active');
     //return;        
 }
 stop;    
}

state Active
{    stop;    
}

state BotTesting
{
 ignores HandleReservationsUpdated;
 stop;    
}
*/