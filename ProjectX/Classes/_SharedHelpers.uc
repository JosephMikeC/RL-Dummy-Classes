/*******************************************************************************
 * _SharedHelpers generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class _SharedHelpers extends Object
 native;

 
struct Orientation
{
 var vector Location;
 var Rotator Rotation;

 structdefaultproperties
 {
     Location=(X=0.0,Y=0.0,Z=0.0)
     Rotation=(Pitch=0,Yaw=0,Roll=0)
 }
};

// Export U_SharedHelpers::execGetLanguageExtension(FFrame&, void* const)
native static function string GetLanguageExtension();

// Export U_SharedHelpers::execDumpUnreferencedAnims(FFrame&, void* const)
native static function DumpUnreferencedAnims();

// Export U_SharedHelpers::execGetDefaultObject(FFrame&, void* const)
native static function PlayerController_X GetDefaultObject(class ObjClass);

// Export U_SharedHelpers::execGetAPlayerController(FFrame&, void* const)
native static function PlayerController_X GetAPlayerController(optional class PlayerControllerClass);

// Export U_SharedHelpers::execIsInTransientPackage(FFrame&, void* const)
native static function bool IsInTransientPackage(string Obj);

// Export U_SharedHelpers::execGetUtcTimeInSeconds(FFrame&, void* const)
native static function Qword GetUtcTimeInSeconds();

// Export U_SharedHelpers::execGetUtcTimeStamp(FFrame&, void* const)
native static function string GetUtcTimeStamp();

/*
static function DrawShadowedText(GetAPlayerController Canvas, coerce string Text, optional int ShadowOffsetX, optional int ShadowOffsetY, optional int ShadowAlpha)
{
 local float X, Y;
 local @NULL C;

 ShadowOffsetX = 2;
 ShadowOffsetY = 2;
 ShadowAlpha = 255;
 X = Canvas.CurX;
 Y = Canvas.CurY;
 C = Canvas.DrawColor;
 Canvas.DrawColor = MakeColor(0, 0, 0, byte(ShadowAlpha));
 Canvas.SetPos(X + float(ShadowOffsetX), Y + float(ShadowOffsetY));
 Canvas.DrawText(Text);
 Canvas.DrawColor = C;
 Canvas.SetPos(X, Y);
 Canvas.DrawText(Text);
 //return;    
}
*/

/*
static final function int FindNetId(@NULL FindId, const out array List)
{
 local GetDefaultObject SearchId;
 local int Index;

 // End:0x49
 foreach List(SearchId, Index)
 {
     // End:0x48
     if(FindId == SearchId)
     {            
         return Index;
     }        
 }    
 return -1;
 //return ReturnValue;    
}
*/