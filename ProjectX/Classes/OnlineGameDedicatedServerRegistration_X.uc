/*******************************************************************************
 * OnlineGameDedicatedServerRegistration_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class OnlineGameDedicatedServerRegistration_X extends Online_X;

/** Task for sending creation to server */
var() export editinline WebTask_X CreationTask;
/** Task for sending updates to server */
var() export editinline WebTask_X UpdateTask;
/** Task for heartbeats */
var() export editinline WebTask_X HeartbeatTask;
var privatewrite transient int GameServerID;
var() int GameTimeTimer;
var privatewrite transient int GameTimeSeconds;
var privatewrite bool bShutdownWhenEmpty;
/** the amount of time for server to shutdown when Psynet is unreachable */
var() private const float PsyNetDisconnectShutdownTime;

/*
protected function OnInit()
{
 super.OnInit();
 //return;    
}

final function RegisterServer()
{
 DelayedUpdateServer();
 //return;    
}

final function UnregisterServer()
{
 // End:0x8F
 if(Greater_QWordQWord(GameServerID, @UnknownCastToken(0x62), 0))
 {
     PsyWebServer.CreateQuery("DeactiveGameServer").AddQwordParam(GameServerID).Send();
     GameServerID = @UnknownCastToken(0x62);
     0
 }
 CreationTask.Cancel();
 UpdateTask.Cancel();
 HeartbeatTask.Cancel();
 ClearTimer('SetShouldShutdown');
 //return;    
}

protected function GetAPlayerController SendHeartbeatRequest()
{
 // End:0x87
 if(Greater_QWordQWord(GameServerID, @UnknownCastToken(0x62), 0))
 {
     return PsyWebServer.CreateQuery("HeartbeatGameServer").AddQwordParam(GameServerID).Send();
 }
 // End:0xB8
 else
 {
     WarnInternal("Attempting to heartbeat when not registered");
     return none;
 }
 //return ReturnValue;    
}

function UpdateServer()
{
 SetTimer(2.0, false, 'DelayedUpdateServer');
 //return;    
}

function DelayedUpdateServer()
{
 // End:0x3B
 if(EqualEqual_QWordQWord(GameServerID, @UnknownCastToken(0x62), 0))
 {
     CreationTask.Send();
 }
 // End:0x5A
 else
 {
     UpdateTask.Send();
 }
 //return;    
}

protected function GetAPlayerController SendUpdateRequest()
{
 local string ServerStatusQuery;
 local int NumPlayersTeam1, NumPlayersTeam2, MaxPlayers, NumPlayersInGameTeam1, NumPlayersInGameTeam2;

 // End:0x621
 if(Len(Outer.ServerName) > 0)
 {
     // End:0x1B1
     if(EqualEqual_QWordQWord(GameServerID, @UnknownCastToken(0x62), 0))
     {
         ServerStatusQuery = PsyWebServer.CreateQuery("CreateGameServer03").AddStringParam(Outer.ServerName).AddStringParam(string(Outer.MachineId)).AddStringParam(Outer.Reservations.Beacon.GetListenAddress()).AddStringParam(Outer.Region).AddIntParam(OnlineSub.GetBuildUniqueId());
     }
     // End:0x20D
     else
     {
         ServerStatusQuery = PsyWebServer.CreateQuery("UpdateGameServer03").AddQwordParam(GameServerID);
     }
     // End:0x26E
     if(Outer.GameSettings != none)
     {
         MaxPlayers = Outer.GameSettings.NumPublicConnections;
     }
     Outer.Reservations.GetPlayerCounts(NumPlayersTeam1, NumPlayersInGameTeam1, NumPlayersTeam2, NumPlayersInGameTeam2);
     // End:0x405
     if(((NumPlayersTeam1 + NumPlayersTeam2) > MaxPlayers) || (NumPlayersInGameTeam1 + NumPlayersInGameTeam2) > MaxPlayers)
     {
         WarnInternal(((((((((((("Invalid players count." @ "GameSettings=") $ string(Outer.GameSettings)) @ "MaxPlayers=") $ string(MaxPlayers)) @ "NumPlayersTeam1=") $ string(NumPlayersTeam1)) @ "NumPlayersTeam2=") $ string(NumPlayersTeam2)) @ "NumPlayersInGameTeam1=") $ string(NumPlayersInGameTeam1)) @ "NumPlayersInGameTeam2=") $ string(NumPlayersInGameTeam2));
     }
     ServerStatusQuery.AddIntParam(Outer.CurrentPlaylistId).AddIntParam(MaxPlayers).AddIntParam(NumPlayersInGameTeam1).AddIntParam(NumPlayersInGameTeam2).AddIntParam(NumPlayersTeam1).AddIntParam(NumPlayersTeam2).AddFloatParam(Outer.AverageMMR).AddIntParam(((Outer.IsInPostGameLobby()) ? 1 : 0)).AddIntParam(GameTimeSeconds).AddStringParam(GetExclusivePlatformString(Outer.Reservations.GetExclusivePlatform())).AddStringParam(Outer.Reservations.GetPlayersPlatformsString()).Send();
 }
 return ServerStatusQuery;
 //return ReturnValue;    
}

final function SetServerNotJoinable()
{
 PsyWebServer.CreateQuery("SetServerNotJoinable").AddQwordParam(GameServerID).Send();
 //return;    
}

protected function OnCreated(GetLanguageExtension Task)
{
 GameServerID = Task.Query.GetQWordResult('ServerID');
 HeartbeatTask.StartTimer();
 UpdateCustomGame();
 //return;    
}

protected function OnCreateFailed(GetLanguageExtension Task)
{
 // End:0x41
 if(Task.HasFailedMaxTimes())
 {
     Outer.DelayedShutdownServer();
 }
 //return;    
}

protected function OnUpdateSucceeded(GetLanguageExtension Task)
{
 HeartbeatTask.StartTimer();
 bShutdownWhenEmpty = false;
 ClearTimer('SetShouldShutdown');
 //return;    
}

protected function OnUpdateFailed(GetLanguageExtension Task)
{
 HeartbeatTask.Cancel();
 // End:0xBD
 if(Task.FailCount == 1)
 {
     LogInternal(("Server update failed once, setting shutdown timer for" @ string(PsyNetDisconnectShutdownTime)) @ "seconds from now");
     SetTimer(PsyNetDisconnectShutdownTime, false, 'SetShouldShutdown');
 }
 // End:0x1CE
 if(Task.HasFailedMaxTimes())
 {
     // End:0x1CE
     if(Outer.IsInPostGameLobby() || Outer.GetStateName() == 'Inactive')
     {
         // End:0x1CE
         if(bShutdownWhenEmpty)
         {
             LogInternal(("Failed to update server for" @ string(Task.FailCount)) @ "attempts, quitting immediately because not in game");
             Outer.DelayedShutdownServer();
         }
     }
 }
 //return;    
}

protected function SetShouldShutdown()
{
 LogInternal(("Failed to update server for" @ string(UpdateTask.FailCount)) @ "attempts, quitting at end of game unless it works before then.");
 bShutdownWhenEmpty = true;
 //return;    
}

function UpdateGameTime(int TimeSeconds)
{
 local int NumPlayersTeam1, NumPlayersTeam2, MaxPlayers, NumPlayersInGameTeam1, NumPlayersInGameTeam2;

 GameTimeSeconds = TimeSeconds;
 // End:0x292
 if((GameTimeSeconds % GameTimeTimer) == 0)
 {
     // End:0x252
     if(class'GameSettingPlaylist_X'.static.IsValidID(Outer.CurrentPlaylistId))
     {
         // End:0x215
         if(Outer.CurrentPlaylistId != Outer.Playlists.NameToID('PrivateMatch'))
         {
             // End:0x12E
             if(Outer.GameSettings != none)
             {
                 MaxPlayers = Outer.GameSettings.NumPublicConnections;
             }
             Outer.Reservations.GetPlayerCounts(NumPlayersTeam1, NumPlayersInGameTeam1, NumPlayersTeam2, NumPlayersInGameTeam2);
             // End:0x1D9
             if(((NumPlayersTeam1 + NumPlayersTeam2) < MaxPlayers) || (NumPlayersInGameTeam1 + NumPlayersInGameTeam2) < MaxPlayers)
             {
                 UpdateServer();
             }
             // End:0x212
             else
             {
                 LogInternal("Not updating game time because game is full", 'GameTime', true);
             }
         }
         // End:0x24F
         else
         {
             LogInternal("Not updating game time because private match", 'GameTime', true);
         }
     }
     // End:0x292
     else
     {
         LogInternal("Not updating game time because playlist is invalid", 'GameTime', true);
     }
 }
 //return;    
}

final function string GetExclusivePlatformString(byte Platform)
{
 switch(Platform)
 {
     // End:0x18
     case 2:
     // End:0x1D
     case 3:
     // End:0x22
     case 1:
     // End:0x50
     case 4:
         return OnlineSub.GetPlatformName(Platform);
     // End:0xFFFF
     default:
         return "Any";
 }
 //return ReturnValue;    
}

final function UpdateCustomGame()
{
 // End:0x114
 if(Greater_QWordQWord(GameServerID, @UnknownCastToken(0x62), 0))
 {
     PsyWebServer.CreateQuery("UpdateCustomGameServer").AddQwordParam(GameServerID).AddStringParam(Outer.CustomMatch.ServerName).AddStringParam(Outer.CustomMatch.Password).Send();
 }
 //return;    
}
*/