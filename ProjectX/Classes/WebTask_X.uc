/*******************************************************************************
 * WebTask_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class WebTask_X extends Component
 native;

//var private native const noexport @NULL VfTable_FTickableObject;
/** Delay between retry attempts: Delay + Delay * FRand() */
var() array<float> RetryDelays;
/** Execute the query on an interval. TimerDelay must be > 0 */
var() privatewrite bool bTimerEnabled;
/** Automatically retry at the next interval if the task fails */
var() bool bRetryOnFail;
var privatewrite transient bool bRetryWhenReady;
/** Execute the query on this interval */
var() float TimerDelay;
var privatewrite transient int FailCount;
var privatewrite transient float NextRetryTime;
var privatewrite transient WebRequest_X WebRequest;
// TODO
//var privatewrite transient SqlQuery_X Query;
// TODO
//var privatewrite transient Error_X Error;
var privatewrite transient float TimerTime;
/** For testing error handling, pretend the requests returned with these errors (in sequence). Insert 'none' for a success */
// TODO
//var() array< Error_X > TestErrors;
var private transient int TestErrorIndex;
//var delegate<OnSend> __OnSend__Delegate;
var delegate<OnSuccess> __OnSuccess__Delegate;
var delegate<OnFail> __OnFail__Delegate;
var delegate<OnFailMax> __OnFailMax__Delegate;

// Not sure what type to make it.
/*
delegate GetAPlayerController OnSend()
{
 //return ReturnValue;    
}
*/

delegate OnSuccess(WebTask_X Task)
{
 //return;    
}

delegate OnFail(WebTask_X Task)
{
 //return;    
}

delegate OnFailMax(WebTask_X Task)
{
 //return;    
}

/*
event bool Send()
{
 // End:0x28
 if(IsReady())
 {
     bRetryWhenReady = false;
     CreateRequest();
     return true;
 }
 // End:0x90
 else
 {
     LogInternal(((GetDebugName() @ "cannot send yet, delayed for") @ string(NextRetryTime - GetCurrentTime())) @ "seconds", 'WebTask');
     bRetryWhenReady = true;
     return false;
 }
 //return ReturnValue;    
}

event Cancel()
{
 // End:0x40
 if(!IsReady() || IsSending())
 {
     LogInternal(GetDebugName() @ "canceled", 'WebTask');
 }
 bRetryWhenReady = false;
 bTimerEnabled = false;
 ClearRequests();
 //return;    
}

event StartTimer()
{
 // End:0x31
 if(TimerDelay > 0.0)
 {
     bTimerEnabled = true;
     TimerTime = 0.0;
 }
 // End:0x62
 else
 {
     WarnInternal(GetDebugName() @ "cannot set timer, TimerDelay is 0");
 }
 //return;    
}

// Export UWebTask_X::execIsReady(FFrame&, void* const)
native final function bool IsReady();

// Export UWebTask_X::execHasFailedMaxTimes(FFrame&, void* const)
native final function bool HasFailedMaxTimes();

// Export UWebTask_X::execIsSending(FFrame&, void* const)
native final function bool IsSending();

protected function CreateRequest()
{
 local string RequestObject;

 ClearRequests();
 TimerTime = 0.0;
 RequestObject = OnSend();
 // End:0x1F9
 if(RequestObject != none)
 {
     WebRequest = WebRequest_X(RequestObject);
     // End:0x103
     if(WebRequest != none)
     {
         LogInternal(GetDebugName() @ "sending request", 'WebTask');
         // End:0xED
         if(WebRequest.RequestState <= 1)
         {
             UnknownLocal_101712153
             @NULL
             0
             @NULL
             @NULL
             @NULL
         }
         @NULL
         // Failed to decompile this line:
             /* NativeFunctionToken
             NothingToken LocalVariableToken LocalVariableToken LocalVariableToken
             LetToken InstanceVariableToken DynamicCastToken LocalVariableToken
             JumpIfNotToken NativeFunctionToken InstanceVariableToken NoObjectToken
             EndFunctionParmsToken NativeFunctionToken NativeFunctionToken FinalFunctionToken
             EndFunctionParmsToken StringConstToken EndFunctionParmsToken NameConstToken
             NoParmToken EndFunctionParmsToken JumpIfNotToken NativeFunctionToken
             ByteToIntToken ContextToken InstanceVariableToken InstanceVariableToken
             ByteToIntToken ByteConstToken EndFunctionParmsToken DynamicVariableToken
             LocalVariableToken IntConstToken EatStringToken NativeFunctionToken
             NothingToken LocalVariableToken LocalVariableToken NativeFunctionToken
             NothingToken LocalVariableToken LocalVariableToken LocalVariableToken
             NativeFunctionToken NativeFunctionToken NativeFunctionToken FinalFunctionToken
             EndFunctionParmsToken StringConstToken EndFunctionParmsToken ObjectToStringToken
             LocalVariableToken EndFunctionParmsToken EndFunctionParmsToken JumpToken
             NativeFunctionToken NativeFunctionToken FinalFunctionToken EndFunctionParmsToken
             StringConstToken EndFunctionParmsToken NameConstToken NoParmToken
             EndFunctionParmsToken ReturnToken NothingToken EndOfScriptToken
             LocalVariableToken StopToken LocalVariableToken LocalVariableToken
              
         // Index was out of range. Must be non-negative and less than the size of the collection.
         Parameter name: index
         // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
         // 6 & Type:If Position:425 */
}

protected function HandleWebRequest(GetAPlayerController InRequest)
{
 HandleResponse(InRequest.Error);
 //return;    
}

protected function HandleQuery(class InQuery)
{
 HandleResponse(InQuery.Error);
 //return;    
}

protected function HandleResponse(class InError)
{
 Error = InError;
 // End:0x2F
 if(Error == none)
 {
     Succeeded();
 }
 // End:0x39
 else
 {
     Failed();
 }
 ClearRequests();
 //return;    
}

function Succeeded()
{
 LogInternal(GetDebugName() @ "success", 'WebTask');
 ClearFailed();
 // End:0x4E
 if(__OnSuccess__Delegate != none)
 {
     OnSuccess(self);
 }
 //return;    
}

function Failed()
{
 IncrementFail();
 bRetryWhenReady = bRetryOnFail;
 LogInternal((((GetDebugName() @ "failed, count=") $ string(FailCount)) @ "delay=") $ string(NextRetryTime - GetCurrentTime()), 'WebTask');
 // End:0x9A
 if(__OnFail__Delegate != none)
 {
     OnFail(self);
 }
 // End:0xD8
 if(FailCount == (RetryDelays.Length + 1))
 {
     // End:0xD8
     if(__OnFailMax__Delegate != none)
     {
         OnFailMax(self);
     }
 }
 WebRequest = none;
 Query = none;
 //return;    
}

function float IncrementFail()
{
 local int DelayIdx;
 local float DelayBase, Delay;

 DelayIdx = Clamp(FailCount, 0, RetryDelays.Length - 1);
 DelayBase = RetryDelays[DelayIdx];
 Delay = DelayBase + (DelayBase * FRand());
 NextRetryTime = GetCurrentTime() + Delay;
 ++ FailCount;
 return Delay;
 //return ReturnValue;    
}

function ClearFailed()
{
 FailCount = 0;
 NextRetryTime = 0.0;
 //return;    
}

protected function ClearRequests()
{
 // End:0x42
 if(WebRequest != none)
 {
     UnknownLocal_101712153
     @NULL
     0
     @NULL
     @NULL
     @NULL
     @NULL
 }
 @NULL
 @NULL
 @NULL
 Query.__EventCompleted__Delegate    
 Query = none;
 Error = none;
}

final event string GetDebugName()
{
 return string(ObjectArchetype);
 //return ReturnValue;    
}
*/