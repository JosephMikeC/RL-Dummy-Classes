/*******************************************************************************
 * OnlinePlayer_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class OnlinePlayer_X extends Online_X
 native;

/** Sub object class that handles all friend related tasks */
//var() protectedwrite class Friends;
//var() privatewrite IsInTransientPackage Authentication;
var protectedwrite transient string PlayerName;
var protectedwrite transient int PlayerID;
var protectedwrite transient byte LoginStatus;
var protectedwrite transient int LocalPlayerNum;
var privatewrite bool bLoggingIn;
var privatewrite bool bLoggingOut;
// Haven't imported the class yet.
//var privatewrite transient Error_X LoginError;
/*
var delegate<EventLoginComplete> __EventLoginComplete__Delegate;
var delegate<EventLogoutComplete> __EventLogoutComplete__Delegate;
var delegate<EventLoginStatusChanged> __EventLoginStatusChanged__Delegate;
var delegate<EventCountryUpdated> __EventCountryUpdated__Delegate;
var delegate<EventCanPlayOnlineChanged> __EventCanPlayOnlineChanged__Delegate;
var delegate<EventShowKeyboardComplete> __EventShowKeyboardComplete__Delegate;

delegate EventLoginComplete(GetAPlayerController Player, Error_X Error)
{
 //return;    
}

delegate EventLogoutComplete(GetAPlayerController Player)
{
 //return;    
}

delegate EventLoginStatusChanged(GetAPlayerController Player)
{
 //return;    
}

delegate EventCountryUpdated(string Country)
{
 //return;    
}

delegate EventCanPlayOnlineChanged(GetAPlayerController Player)
{
 //return;    
}

delegate EventShowKeyboardComplete(string NewText, bool bCanceled)
{
 //return;    
}
*/

/*
final function GetAPlayerController GetOnlineGame()
{
 return class'OnlineGame_X'.static.GetInstance();
 //return ReturnValue;    
}

protected function OnInit()
{
 Authentication = Authentication.NewInstance(self);
 Authentication.Init(OnlineSub);
 //return;    
}

final event bool IsPrimaryPlayer()
{
 return GetOnlineGame().Account.PrimaryPlayer == self;
 //return ReturnValue;    
}

function InitPlayer()
{
 LocalPlayerNum = Outer.ControllerId;
 UpdateSplitscreenId();
 OnlineSub.PlayerInterface.AddCanPlayOnlineChangedDelegate(HandleCanPlayOnlineChanged);
 Friends = Friends.NewInstance(self);
 Friends.Init(OnlineSub);
 Login("", "");
 //return;    
}

function OnRemoved()
{
 OnlineSub.PlayerInterface.RemoveCanPlayOnlineChangedDelegate(HandleCanPlayOnlineChanged);
 OnlineSub.SystemInterface.ClearControllerChangeDelegate(HandleControllerChange);
 OnlineSub.PlayerInterface.ClearLoginStatusChangeDelegate(HandleUserLoginStatusChange, byte(LocalPlayerNum));
 OnlineSub.PlayerInterface.ClearLoginChangeDelegate(HandleLoginChanged);
 Authentication.OnRemoved();
 //return;    
}

function Login(string LoginName, string LoginPassword, optional delegate<GetDefaultObject> Callback)
{
 OnlineSub.SystemInterface.AddControllerChangeDelegate(HandleControllerChange);
 OnlineSub.PlayerInterface.AddLoginStatusChangeDelegate(HandleUserLoginStatusChange, byte(LocalPlayerNum));
 OnlineSub.PlayerInterface.AddLoginChangeDelegate(HandleLoginChanged);
 LoginError = none;
 // End:0x1CE
 if(!IsLoggedIn())
 {
     UnknownLocal_1658369
     @NULL
     @NULL
     bLoggingIn
     )
     bLoggingIn = true;
     OnlineSub.PlayerInterface.AddLoginFailedDelegate(byte(LocalPlayerNum), HandleLoginFailed);
     OnlineSub.PlayerInterface.Login(byte(LocalPlayerNum), LoginName, LoginPassword);
 }
 // End:0x1F2
 else
 {
     // End:0x1F2
     if(Callback != none)
     {
         EventLoginComplete(self, none);
     }
 }
 //return;    
}

function Logout(optional delegate<GetDefaultObject> Callback)
{
 OnlineSub.SystemInterface.ClearControllerChangeDelegate(HandleControllerChange);
 OnlineSub.PlayerInterface.ClearLoginStatusChangeDelegate(HandleUserLoginStatusChange, byte(LocalPlayerNum));
 OnlineSub.PlayerInterface.ClearLoginChangeDelegate(HandleLoginChanged);
 // End:0x16E
 if(LoginStatus != 0)
 {
     UnknownLocal_1658113
     @NULL
     @NULL
     bLoggingOut
     )
     bLoggingOut = true;
     OnlineSub.PlayerInterface.Logout(byte(LocalPlayerNum));
     HandleLogoutComplete(true);
 }
 // End:0x191
 else
 {
     // End:0x191
     if(Callback != none)
     {
         EventLogoutComplete(self);
     }
 }
 //return;    
}

protected function HandleLoginFailed(byte PlayerNum, byte ErrorCode)
{
 // End:0xBD
 if(PlayerNum == LocalPlayerNum)
 {
     UpdateSplitscreenId();
     bLoggingIn = false;
     OnlineSub.PlayerInterface.ClearLoginFailedDelegate(byte(LocalPlayerNum), HandleLoginFailed);
     LoginError = GetConnectionStatusError(ErrorCode);
     EventLoginComplete(self, LoginError);
 }
 //return;    
}

protected function HandleLoginChanged(byte PlayerNum)
{
 // End:0x194
 if(PlayerNum == LocalPlayerNum)
 {
     LoginStatus = OnlineSub.PlayerInterface.GetLoginStatus(byte(LocalPlayerNum));
     // End:0x180
     if((LoginStatus == 2) || LoginStatus == 1)
     {
         PlayerName = OnlineSub.PlayerInterface.GetPlayerNickname(byte(LocalPlayerNum));
         PlayerName = class'GameInfo'.static.SanitizePlayerName(PlayerName);
         OnlineSub.PlayerInterface.GetUniquePlayerId(byte(LocalPlayerNum), PlayerID);
         // End:0x180
         if(bLoggingIn)
         {
             bLoggingIn = false;
             EventLoginComplete(self, none);
         }
     }
     EventLoginStatusChanged(self);
 }
 //return;    
}

protected function HandleLogoutComplete(bool bWasSuccessful)
{
 bLoggingOut = false;
 LoginStatus = 0;
 OnlineSub.PlayerInterface.ClearLogoutCompletedDelegate(byte(LocalPlayerNum), HandleLogoutComplete);
 EventLoginStatusChanged(self);
 EventLogoutComplete(self);
 //return;    
}

final function bool IsLoggedIn(optional bool bRequireOnlineLogin)
{
 bRequireOnlineLogin = true;
 return (LoginStatus == 2) || (LoginStatus == 1) && !bRequireOnlineLogin;
 //return ReturnValue;    
}

protected function HandleUserLoginStatusChange(byte NewStatus, DumpUnreferencedAnims NewId)
{
 // End:0x5A
 if(NewStatus == 0)
 {
     GameViewportClient_X(Outer.ViewportClient).RemovePlayer(Outer);
 }
 //return;    
}

protected function HandleControllerChange(int InControllerID, bool bIsConnected)
{
 // End:0x6E
 if(!bIsConnected && InControllerID == LocalPlayerNum)
 {
     GameViewportClient_X(Outer.ViewportClient).RemovePlayer(Outer);
 }
 //return;    
}

protected function OnNewGame()
{
 super.OnNewGame();
 // End:0x8D
 if((!IsInMainMenu() && GetWorldInfo().NetMode == NM_Client) && IsPrimaryPlayer())
 {
     GetOnlineGame().Voice.RegisterTalker(self);
 }
 // End:0xC3
 else
 {
     GetOnlineGame().Voice.UnregisterTalker(self);
 }
 //return;    
}

final function bool ShowKeyboard(string TitleText, string DescriptionText, bool bIsPassword, string DefaultText, int MaxLength, delegate<GetUtcTimeStamp> OnCompleteDelegate, optional int LocalPlayerNumOverride)
{
 LocalPlayerNumOverride = -1;
 UnknownLocal_1657089
 @NULL
 @NULL
  *= @NULL;    
}

final function HideKeyboard()
{
 OnlineSub.PlayerInterface.HideKeyboardUI(0);
 OnlineSub.PlayerInterface.ClearKeyboardInputDoneDelegate(HandleShowKeyboardComplete);
 //return;    
}

private final function HandleShowKeyboardComplete(bool bWasSuccessful)
{
 local string NewText;
 local byte bCancelled;

 OnlineSub.PlayerInterface.ClearKeyboardInputDoneDelegate(HandleShowKeyboardComplete);
 // End:0x9B
 if(bWasSuccessful)
 {
     NewText = OnlineSub.PlayerInterface.GetKeyboardInputResults(bCancelled);
 }
 EventShowKeyboardComplete(NewText, bCancelled == 1);
 //return;    
}

function UpdateStat(name StatName, int Points)
{
 // End:0x87
 if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
 {
     OnlineSub.PlayerInterfaceEx.UpdateStat(byte(LocalPlayerNum), StatName, Points);
 }
 //return;    
}

function UnlockAchievement(byte LocalUserNum, int AchievementId, optional float PercentComplete)
{
 PercentComplete = 100.0;
 // End:0x8E
 if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
 {
     OnlineSub.PlayerInterfaceEx.UnlockAchievement(LocalUserNum, AchievementId, PercentComplete);
 }
 //return;    
}

function array GetSyncedAchievements(byte LocalUserNum)
{
 local array LockedAchievements;

 // End:0x7D
 if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
 {
     LockedAchievements = OnlineSub.PlayerInterfaceEx.GetSyncedAchievements(LocalUserNum);
 }
 return LockedAchievements;
 //return ReturnValue;    
}

function PostActivityFeedMessage(string Id, array<out string> StringReplaceList)
{
 // End:0x87
 if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
 {
     OnlineSub.PlayerInterfaceEx.AddInGamePost(Id, byte(LocalPlayerNum), StringReplaceList);
 }
 //return;    
}

final function SetControllerColor(int InControllerID, GetDefaultObject NewColor)
{
 // End:0xBD
 if(NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
 {
     // End:0xBD
     if(OnlineSub.SystemInterface.IsControllerConnected(InControllerID))
     {
         OnlineSub.SystemInterface.SetControllerColor(InControllerID, NewColor);
     }
 }
 //return;    
}

final function ResetControllerColor(int InControllerID)
{
 // End:0xB4
 if(NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
 {
     // End:0xB4
     if(OnlineSub.SystemInterface.IsControllerConnected(InControllerID))
     {
         OnlineSub.SystemInterface.ResetControllerColor(InControllerID);
     }
 }
 //return;    
}

final function OpenPS4DisplayMode(byte DisplayMode, optional array< class > Targets, optional int ServiceLabel)
{
 ServiceLabel = 0;
 // End:0x96
 if(NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
 {
     OnlineSub.SystemInterface.OpenPS4DisplayMode(byte(LocalPlayerNum), DisplayMode, Targets, ServiceLabel);
 }
 //return;    
}

final function OpenErrorDialog(byte ErrorCode)
{
 // End:0x7E
 if(NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
 {
     OnlineSub.SystemInterface.OpenErrorDialog(byte(LocalPlayerNum), ErrorCode);
 }
 //return;    
}

final function byte CanCommunicate()
{
 // End:0x76
 if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
 {
     return OnlineSub.PlayerInterface.CanCommunicate(byte(LocalPlayerNum));
 }
 return 0;
 //return ReturnValue;    
}

final function GetPlayerCountry(delegate<class> Handler)
{
 UnknownLocal_1657601
 @NULL
 @NULL    ;
 OnlineSub
 // DebugMode:True
 assert((@NULL != ((none) != ))) != goto J0xF1);
 //return;
 // Failed to decompile this line:
     /* ReturnToken
     NothingToken  */
 // Index was out of range. Must be non-negative and less than the size of the collection.
 Parameter name: index
}

final function HandlePlayerCountryReceived(@NULL InPlayerId, string Country)
{
 // End:0x8B
 if(InPlayerId == PlayerID)
 {
     OnlineSub.PlayerInterface.ClearReadPlayerCountryDelegate(byte(LocalPlayerNum), HandlePlayerCountryReceived);
     EventCountryUpdated(Country);
 }
 //return;    
}

function byte CanPlayOnline()
{
 local byte HintPrivLevel;

 OnlineSub.PlayerInterface.CanPlayOnline(byte(LocalPlayerNum), HintPrivLevel);
 return HintPrivLevel;
 //return ReturnValue;    
}

protected function OnExit()
{
 Logout();
 super.OnExit();
 //return;    
}

private final function HandleCanPlayOnlineChanged(byte LocalUserNum)
{
 // End:0x2D
 if(LocalUserNum == LocalPlayerNum)
 {
     EventCanPlayOnlineChanged(self);
 }
 //return;    
}

function string GetRemoteName(optional int LocalPlayerIndex)
{
 local GetAPlayerController OtherPlayer;

 LocalPlayerIndex = -1;
 // End:0x61
 if(class'WorldInfo'.static.IsConsoleBuild(12))
 {
     // End:0x61
     if((LoginStatus == 2) || LoginStatus == 1)
     {
         return PlayerName;
     }
 }
 // End:0xB2
 if(LoginStatus == 2)
 {
     // End:0xA8
     if(LocalPlayerIndex > 0)
     {
         return ((PlayerName $ "(") $ string(LocalPlayerIndex + 1)) $ ")";
     }
     return PlayerName;
 }
 // End:0x153
 if(LocalPlayerIndex == -1)
 {
     // End:0x12B
     if(Outer.Actor != none)
     {
         LocalPlayerIndex = Outer.Actor.NetPlayerIndex;
     }
     // End:0x153
     else
     {
         LocalPlayerIndex = Outer.ControllerId;
     }
 }
 // End:0x1D4
 foreach GetOnlineGame().OnlinePlayers(OtherPlayer,)
 {
     // End:0x1D3
     if(OtherPlayer.LoginStatus == 2)
     {            
         return OtherPlayer.GetRemoteName(LocalPlayerIndex);
     }        
 }    
 return "";
 //return ReturnValue;    
}

function string GetLocalName()
{
 // End:0x1E
 if(LoginStatus != 0)
 {
     return PlayerName;
 }
 return "";
 //return ReturnValue;    
}

final function bool IsUpdateRequired()
{
 return (LoginError != none) && LoginError.Type == class'Errors_X'.default.OSCS_UpdateRequired;
 //return ReturnValue;    
}

protected function UpdateSplitscreenId()
{
 // End:0x2F
 if(IsPrimaryPlayer())
 {
     PlayerID.SplitscreenID = 0;
 }
 // End:0x57
 else
 {
     PlayerID.SplitscreenID = byte(LocalPlayerNum);
 }
 //return;    
}

function GetAPlayerController CreateWebRequest()
{
 return PsyNet.super(OnlinePlayer_X).CreateWebRequest(PlayerID);
 //return ReturnValue;    
}

simulated function PrintDebugInfo(GetAPlayerController Drawer)
{
 super(Object).PrintDebugInfo(Drawer);
 Drawer.PrintProperty(string('PlayerName'), PlayerName);
 Drawer.PrintProperty(string('PlayerID'), UniqueNetIdToString(PlayerID));
 Drawer.PrintProperty(string('LoginStatus'), string(LoginStatus));
 //return;    
}
*/