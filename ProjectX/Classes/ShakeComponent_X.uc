/*******************************************************************************
 * ShakeComponent_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class ShakeComponent_X extends ActorComponent_X
 native
 editinlinenew;

enum EShakeReceiver
{
 ShakeReceiver_All,
 ShakeReceiver_Local,
 ShakeReceiver_NonLocal,
 ShakeReceiver_MAX
};

struct native ShakeReceiver
{
 var Pawn_X Player;
 var float Scale;

 structdefaultproperties
 {
     Player=none
     Scale=0.0
 }
};

/** All viewers within this radius will receive the full shake */
var(Shake) float InnerRadius<ClampMin=0.0>;
/** All viewers outside this radius will not receive any shake */
var(Shake) float OuterRadius<ClampMin=0.0>;
/** Falloff for camera shake scale for viewer's distance from source */
var(Shake) float Falloff;
/** Will trigger as soon as we are attached */
var(Shake) bool bAutoPlay;
/** Detach when the shakes complete */
var(Shake) bool bAutoDetach;
/** If true, it will only be played on players that have pawns */
var(Shake) bool bOnlyAffectPlayersWithPawns;
/** Decrease the shake and force feedback amount as players move further from source */
var(Shake) bool bAttenuate;
var privatewrite transient bool bPlaying;
var privatewrite transient bool bStopping;
/** Who to play the shake for */
var(Shake) EShakeReceiver Receiver;
/** Scale radius range */
var(Shake) float RadiusScale;
/** Blend times */
var(Shake) float BlendInTime;
/** Blend times */
var(Shake) float BlendOutTime;
/** The camera shake parameters */
var(Camera) CameraShake ShakeParams;
/** Shake scales */
var(Scale) RawDistributionFloat AmplitudeScale;
/** Shake scales */
var(Scale) RawDistributionFloat FrequencyScale;
/** Shake scales */
var(Scale) RawDistributionFloat DurationScale;
var const transient float CurrentAmplitudeScale;
var const transient float CurrentFrequencyScale;
/** Feedback params */
var(Feedback) ForceFeedbackWaveform ForceFeedbackWaveform;
/** Feedback scales */
var(Feedback) float ForceFeedbackScale;
/** -1 = full left rotor, 0 = both rotators equal, 1=full right rotator */
var(Feedback) float ForceFeedbackBalance;
var() editinline array<ParticleSysParam> InstanceParameters;
var privatewrite transient float PlayTime;
var privatewrite transient float StopTime;
var privatewrite transient vector ShakeLocTimeOffset;
var privatewrite transient vector ShakeRotTimeOffset;
var privatewrite transient float ShakeFOVTimeOffset;
var privatewrite transient float CameraShakeDuration;
var privatewrite transient float ForceFeedbackDuration;
var privatewrite transient float ForceFeedbackSamplesTime;
var privatewrite transient Actor PrevOwner;
var privatewrite transient array<ShakeReceiver> Receivers;
