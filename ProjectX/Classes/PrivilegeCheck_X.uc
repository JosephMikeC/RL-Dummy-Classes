/*******************************************************************************
 * PrivilegeCheck_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class PrivilegeCheck_X extends Object;

var privatewrite transient byte Privilege;
var privatewrite transient array<string> ControllerIDs;
var privatewrite transient array<int> RemainingControllerIDs;
var privatewrite transient array<int> PrivilegeLevels;
var privatewrite transient bool bHasRestriction;

// Can't figure out type and the rest use it.
//var transient delegate<GetDefaultObject> Callback;
/*
function Init(int ControllerId, byte InPrivilege, delegate<GetDefaultObject> InCallback)
{
 local GameViewportClient_X Player;

 // End:0x94
 if(ControllerId == -1)
 {
     // End:0x90
     foreach class'Engine'.static.GetEngine().GamePlayers(Player,)
     {
         // End:0x8F
         if(Player != none)
         {
             ControllerIDs.AddItem(Player.ControllerId);
         }            
     }        
 }
 // End:0xAA
 else
 {
     ControllerIDs.AddItem(ControllerId);
 }
 RemainingControllerIDs = ControllerIDs;
 Privilege = InPrivilege;
 Callback = InCallback;
 //return;    
}

function AddResult(int ControllerId, byte PrivilegeLevel)
{
 local int Index;

 Index = ControllerIDs.Find(ControllerId);
 // End:0x35
 if(Index == -1)
 {
     return;
 }
 // End:0x57
 if(RemainingControllerIDs.Find(ControllerId) == -1)
 {
     return;
 }
 RemainingControllerIDs.RemoveItem(ControllerId);
 PrivilegeLevels[Index] = PrivilegeLevel;
 // End:0xAA
 if(PrivilegeLevel != 3)
 {
     bHasRestriction = true;
 }
 // End:0xDC
 if(Callback != none && IsFinished())
 {
     OnPriviledgeChecked(self);
 }
 //return;    
}

function Finish(byte PrivilegeLevel)
{

 J0x00:    // End:0x31 [Loop If]
 if(RemainingControllerIDs.Length > 0)
 {
     AddResult(RemainingControllerIDs[0], PrivilegeLevel);
     // [Loop Continue]
     goto J0x00;
 }
 //return;    
}

final function bool IsFinished()
{
 return RemainingControllerIDs.Length == 0;
 //return ReturnValue;    
}
*/