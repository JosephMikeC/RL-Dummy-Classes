/*******************************************************************************
 * WebRequest_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class WebRequest_X extends Object
 native;

enum EWebRequestState
{
 WebRequestState_PendingSend,
 WebRequestState_PendingResponse,
 WebRequestState_Success,
 WebRequestState_Error,
 WebRequestState_MAX
};

var const transient byte RequestState;
var const transient string URL;
var private transient HttpRequestInterface HTTPRequest;
var const transient bool HttpResponse;
var const transient string Content;
var const transient string ResponseData;
// Haven't added the class yet.
//var const transient Error_X Error;
var const transient bool bConnectionReset;
/*
var delegate<EventCompleted> __EventCompleted__Delegate;

delegate EventCompleted(class Request)
{
 //return;    
}

static final function GetAPlayerController Create()
{
 return new class'WebRequest_X';
 //return ReturnValue;    
}

// Export UWebRequest_X::execAddIntParam(FFrame&, void* const)
native final function GetAPlayerController AddIntParam(string Key, int Value);

// Export UWebRequest_X::execAddQwordParam(FFrame&, void* const)
native final function GetAPlayerController AddQwordParam(string Key, Qword Value);

// Export UWebRequest_X::execAddFloatParam(FFrame&, void* const)
native final function GetAPlayerController AddFloatParam(string Key, float Value);

// Export UWebRequest_X::execAddStringParam(FFrame&, void* const)
native final function GetAPlayerController AddStringParam(string Key, string Value);

// Export UWebRequest_X::execAddPlayerIDParam(FFrame&, void* const)
native final function GetAPlayerController AddPlayerIDParam(string Key, GetDefaultObject PlayerID);

// Export UWebRequest_X::execSetHeader(FFrame&, void* const)
native final function GetAPlayerController SetHeader(string Key, string Value);

// Export UWebRequest_X::execSend(FFrame&, void* const)
native final function GetAPlayerController Send(string InURL, optional delegate<GetUtcTimeStamp> OnCompleteCallback);

// Export UWebRequest_X::execGetHttpRequest(FFrame&, void* const)
native final function GetAPlayerController GetHttpRequest();

// Export UWebRequest_X::execIsSent(FFrame&, void* const)
native final function bool IsSent();

// Export UWebRequest_X::execIsComplete(FFrame&, void* const)
native final function bool IsComplete();

// Export UWebRequest_X::execIsError(FFrame&, void* const)
native final function bool IsError();

// Export UWebRequest_X::execIsSuccess(FFrame&, void* const)
native final function bool IsSuccess();
*/
private final event ConstructHttpRequest()
{
 HTTPRequest = class'HttpFactory'.static.CreateRequest();
 HTTPRequest.__OnProcessRequestComplete__Delegate = HandleHttpRequestComplete;
 //return;    
}

// Export UWebRequest_X::execHandleHttpRequestComplete(FFrame&, void* const)
private native final function HandleHttpRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed);

final event bool HasInternetConnection()
{
 return class'OnlineGame_Base_X'.static.GetInstance().super(WebRequest_X).HasInternetConnection();
 //return ReturnValue;    
}

// Export UWebRequest_X::execSetError(FFrame&, void* const)
native function SetError(class InError);

simulated function PrintDebugInfo(DebugDrawer_X Drawer)
{
 super.PrintDebugInfo(Drawer);
 Drawer.PrintProperty(string('RequestState'), string(RequestState));
 //return;    
}

function string GetStringResult(string Key)
{
 local int StartIdx, EndIdx;

 Key = Key $ "=";
 StartIdx = InStr(ResponseData, Key,, true);
 // End:0xD8
 if(StartIdx != -1)
 {
     StartIdx += Len(Key);
     EndIdx = InStr(ResponseData, "&",, true, StartIdx);
     // End:0xAD
     if(EndIdx == -1)
     {
         EndIdx = Len(ResponseData);
     }
     return UnresolvedNativeFunction_202(Mid(ResponseData, StartIdx, EndIdx - StartIdx));
 }
 return "";
 //return ReturnValue;    
}