/*******************************************************************************
 * OnlineGameReservations_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class OnlineGameReservations_X extends Online_X
 native;

struct native ReservationData
{
 var int PlayerID;
 var string PlayerName;
 var int PartyID;
 var byte Status;
 var float TimeoutTime;
 var bool bDisableCrossPlay;
 var string PRI;
 var byte Team;
 //var class Connection;
 var SkillRating Skill;

 structdefaultproperties
 {
     PlayerID=0
     PlayerName=""
     PartyID=0
     Status=EReservationStatus.ReservationStatus_None
     TimeoutTime=0.0
     bDisableCrossPlay=false
     PRI=none
     Team=255
     Connection=none
     Skill=(Mu=25.0,Sigma=8.3330)
 }
};

struct native TeamPairHistory
{
 var int PartyA;
 var int PartyB;
 var int Count;

 structdefaultproperties
 {
     PartyA=0
     PartyB=0
     Count=0
 }
};

var export editinline transient array<string> PendingKeyRequest;
/** How long to wait for a player to connect to server before releasing their reservation */
var() float ReservationTimeout;
/** How long to wait for server to fill up before timing out */
var() float WaitForPlayersTimeout;
// TODO
//var export editinline TcpMessageBeacon Beacon;
var transient array<OnlinePlayer_X> Players;
var privatewrite transient bool bSkipReservationCheck;
var privatewrite transient bool bSinglePlayerMatchmaking;
var privatewrite transient bool bServerTraveling;
var transient bool bScrambleTeams;
var transient bool bMatchStarted;
var transient array<string> TeamPairHistories;
var delegate<EventReservationsUpdated> __EventReservationsUpdated__Delegate;
var delegate<EventMigrationJoinOccurred> __EventMigrationJoinOccurred__Delegate;

delegate EventReservationsUpdated()
{
 //return;    
}

delegate EventMigrationJoinOccurred()
{
 //return;    
}

/*
protected function OnInit()
{
 super.OnInit();
 bSkipReservationCheck = class'EngineShare_X'.static.ParseCommandlineParam("FakeServer");
 bSinglePlayerMatchmaking = bSkipReservationCheck || class'EngineShare_X'.static.ParseCommandlineParam("spmm");
 Beacon.AddMessageHandler(class'PingMessage_X', HandlePingMessage);
 Beacon.AddMessageHandler(class'AddReservationMessagePublic_X', HandlePublicReservationMessage);
 Beacon.AddMessageHandler(class'AddReservationMessagePrivate_X', HandlePrivateReservationMessage);
 Beacon.BeginListen();
 //return;    
}

protected function HandlePingMessage(class Connection, class Message)
{
 // End:0x8A
 if(!PingMessage_X(Message).bIsResponse)
 {
     Beacon.CreateMessage(class'PingMessage_X').SetIsResponse().Send(Connection);
 }
 //return;    
}

function GetKeys_OnSucceeded_PublicReservation(IsInTransientPackage KeyRequestTask)
{
 local GetLanguageExtension Info;
 local GetAPlayerController Engine;

 Engine = class'Engine'.static.GetEngine();
 Info.EncryptionKey = OnlineSub.DecodeBase64(KeyRequestTask.Response.EncryptionKey);
 Info.InitializationVector = OnlineSub.DecodeBase64(KeyRequestTask.Response.InitializationVector);
 Info.HMACKey = OnlineSub.DecodeBase64(KeyRequestTask.Response.HMACKey);
 Info.SessionIdentifier = OnlineSub.DecodeBase64(KeyRequestTask.Response.SessionIdentifier);
 Engine.AddNetworkSecurityKey(Info);
 RemoveEncryptionKeyRequestTask(KeyRequestTask.PlayerID);
 // End:0x2B5
 if(!HandlePublicReservation(KeyRequestTask.Connection, AddReservationMessagePublic_X(KeyRequestTask.Message)))
 {
     KeyRequestTask.Connection.Close();
 }
 //return;    
}

protected function HandlePublicReservationMessage(class Connection, class Message)
{
 local editinline IsInTransientPackage KeyRequestTask;
 local GetUtcTimeStamp ReservationMessage;

 ReservationMessage = AddReservationMessagePublic_X(Message);
 // End:0x19D
 if(ReservationMessage.Players[0].PlayerID.Platform == 4)
 {
     KeyRequestTask = new class'EncryptionKeyRequestWebTask_X';
     KeyRequestTask.PlayerID = ReservationMessage.Players[0].PlayerID;
     KeyRequestTask.Message = Message;
     KeyRequestTask.Connection = Connection;
     KeyRequestTask.SendRequestFromServer(Beacon.GetListenAddress(), GetKeys_OnSucceeded_PublicReservation, GetKeys_OnFailed);
     AddEncryptionKeyRequestTask(KeyRequestTask);
 }
 // End:0x1DD
 else
 {
     // End:0x1DD
     if(!HandlePublicReservation(Connection, ReservationMessage))
     {
         Connection.Close();
     }
 }
 //return;    
}

protected function bool HandlePublicReservation(class Connection, class Message)
{
 local @NULL PlayerData;
 local array TempPlayers;
 local @NULL Rating;

 LogInternal((("HandleReservation NumPlayers=" $ string(Players.Length)) @ "Message=") $ Message.GetDebugString(), 'Reservations', true);
 // End:0xEE
 if(bServerTraveling)
 {
     LogInternal("Server traveling, closing connection", 'Reservations', true);
     Beacon.CreateMessage(class'ReservationsTravelingMessage_X').Send(Connection);
     return false;
 }
 // End:0x1DC
 if(Message.Settings.bFriendJoin)
 {
     // End:0x17F
     if(Outer.IsRankedMatch())
     {
         LogInternal("Attempting friend join during ranked match", 'Reservations', true);
         return false;
     }
     // End:0x1DC
     if(Outer.GameSettings == none)
     {
         LogInternal("Attempting to friend-join an empty server", 'Reservations', true);
         return false;
     }
 }
 // End:0x2F8
 if(Message.Settings.bRankedReconnect)
 {
     // End:0x2F8
     if(HasGameEnded() || Players.Find('PlayerID', Message.Players[0].PlayerID) == -1)
     {
         LogInternal("Attempting to join ranked match that has ended", 'Reservations', true);
         Beacon.CreateMessage(class'MatchEndedMessage_X').Send(Connection);
         return false;
     }
 }
 // End:0x4D8
 if(Outer.GameSettings == none)
 {
     // End:0x3A9
     if(!class'GameSettingPlaylist_X'.static.IsValidID(Message.Settings.PlaylistId))
     {
         LogInternal("Player did not send a valid playlist ID!", 'Reservations', true);
         return false;
     }
     LogInternal("SetPlaylist" @ Outer.Playlists.GetPlaylistFriendlyName(Message.Settings.PlaylistId), 'Reservations', true);
     Outer.SetPlaylist(Message.Settings.PlaylistId);
     // End:0x4D5
     if(Outer.GameSettings == none)
     {
         LogInternal("Player did not send a valid playlist ID!", 'Reservations', true);
         return false;
     }
 }
 // End:0x632
 else
 {
     // End:0x632
     if(class'GameSettingPlaylist_X'.static.IsValidID(Outer.CurrentPlaylistId) && class'GameSettingPlaylist_X'.static.IsValidID(Message.Settings.PlaylistId))
     {
         // End:0x632
         if(Message.Settings.PlaylistId != Outer.CurrentPlaylistId)
         {
             LogInternal("Player sent wrong playlist", 'Reservations', true);
             Beacon.CreateMessage(class'ReservationsWrongPlaylistMessage_X').Send(Connection);
             return false;
         }
     }
 }
 // End:0x6C3
 if(CanAcceptReservationsForPlatform(Message) == false)
 {
     LogInternal("Attempting to join an exclusive platform server", 'Reservations', true);
     class'BugReport_X'.static.StaticSubmitBugReport("ReservationsXPlayFailure");
     return false;
 }
 TempPlayers = AddPlayersFromReservationMessage(Message, Connection);
 // End:0x87E
 if(!bSkipReservationCheck && TempPlayers.Length > Outer.GameSettings.NumPublicConnections)
 {
     LogInternal((("Reservations full, TempPlayers=" $ string(TempPlayers.Length)) @ "NumPublicConnections=") $ string(Outer.GameSettings.NumPublicConnections), 'Reservations', true);
     // End:0x835
     if(!Message.Settings.bFriendJoin)
     {
         class'BugReport_X'.static.StaticSubmitBugReport("ReservationsFullServer");
     }
     Beacon.CreateMessage(class'ReservationsFullMessage_X').Send(Connection);
     return false;
 }
 LogInternal(("POST AddPlayersFromReservationMessage" @ string(bMatchStarted)) @ string(Outer.IsRankedMatch()));
 // End:0x90E
 if(bMatchStarted && Outer.IsRankedMatch())
 {
 }
 // End:0xA74
 else
 {
     // End:0xA74
     if(!bSkipReservationCheck && !AssignTeams(Outer.GameSettings.NumPublicConnections / 2, TempPlayers))
     {
         LogInternal("Reservations full, could not assign teams, closing connection", 'Reservations', true);
         // End:0xA2B
         if(!Message.Settings.bFriendJoin)
         {
             class'BugReport_X'.static.StaticSubmitBugReport("ReservationsFullTeamServer");
         }
         Beacon.CreateMessage(class'ReservationsTeamFullMessage_X').Send(Connection);
         return false;
     }
 }
 // End:0xC2A
 foreach Message.Players(PlayerData,)
 {
     // End:0xC29
     if(!PlayerData.bRemotePlayer)
     {
         Rating.PlayerID = PlayerData.PlayerID;
         Rating.Mu = PlayerData.SkillMu;
         Rating.Sigma = PlayerData.SkillSigma;
         Outer.Skill.PreCacheSkill(Rating, Outer.CurrentPlaylistId);
         Outer.Skill.SyncPlayerSkill(PlayerData.PlayerID, HandleSkillSynced);
     }        
 }    
 DisconnectExistingPlayers(Message);
 UnknownLocal_382140441
 @NULL
 ""
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 TempPlayers
 )
 // End:0xCC1
 if(Message.Settings.bMigration)
 {
     EventMigrationJoinOccurred();
 }
 // End:0xD31
 if(bMatchStarted || Message.Settings.bMigration)
 {
     CreateReadyMessage().Send(Connection);
 }
 goto J0xE3B;
 // End:0xD68
 if(!IsTimerActive('NotAllPlayersJoined'))
 {
     SetTimer(WaitForPlayersTimeout, false, 'NotAllPlayersJoined');
 }
 // End:0xE3B
 if(GetNumReservedPlayers() < Outer.GameSettings.NumPublicConnections)
 {
     Beacon.CreateMessage(class'ReservationsWaitingMessage_X').SetWaitingForPlayers(GetNumReservedPlayers(), Outer.GameSettings.NumPublicConnections).Broadcast();
 }
 J0xE3B:
 return true;
}

protected function GetAPlayerController CreateReadyMessage()
{
 return Beacon.CreateMessage(class'ReservationsReadyMessage_X').SetServerAddress(Outer.GetIPAddress(true));
 //return ReturnValue;    
}

function StartMatch()
{
 bMatchStarted = true;
 ClearTimer('NotAllPlayersJoined');
 // End:0x43
 if(!IsTimerActive('CheckReservationTimeout'))
 {
     StartReservationTimeout();
 }
 CreateReadyMessage().Broadcast();
 //return;    
}

function GetKeys_OnSucceeded_PrivateReservation(IsInTransientPackage KeyRequestTask)
{
 local GetLanguageExtension Info;
 local GetAPlayerController Engine;

 Engine = class'Engine'.static.GetEngine();
 Info.EncryptionKey = OnlineSub.DecodeBase64(KeyRequestTask.Response.EncryptionKey);
 Info.InitializationVector = OnlineSub.DecodeBase64(KeyRequestTask.Response.InitializationVector);
 Info.HMACKey = OnlineSub.DecodeBase64(KeyRequestTask.Response.HMACKey);
 Info.SessionIdentifier = OnlineSub.DecodeBase64(KeyRequestTask.Response.SessionIdentifier);
 Engine.AddNetworkSecurityKey(Info);
 RemoveEncryptionKeyRequestTask(KeyRequestTask.PlayerID);
 // End:0x2B5
 if(!HandlePrivateReservation(KeyRequestTask.Connection, AddReservationMessagePrivate_X(KeyRequestTask.Message)))
 {
     KeyRequestTask.Connection.Close();
 }
 //return;    
}

function GetKeys_OnFailed(IsInTransientPackage KeyRequestTask)
{
 LogInternal("GetKeys failed", 'Reservations', true);
 Beacon.CreateMessage(class'ReservationsKeysFailedMessage_X').Send(KeyRequestTask.Connection);
 KeyRequestTask.Connection.Close();
 RemoveEncryptionKeyRequestTask(KeyRequestTask.PlayerID);
 //return;    
}

protected function HandlePrivateReservationMessage(class Connection, class Message)
{
 local editinline IsInTransientPackage KeyRequestTask;
 local GetUtcTimeStamp ReservationMessage;
 local string PlatformName;

 ReservationMessage = AddReservationMessagePrivate_X(Message);
 PlatformName = class'OnlineSubsystem'.static.GetPlatformName(ReservationMessage.PartyLeaderID.Platform);
 // End:0x1A8
 if(PlatformName == "XboxOne")
 {
     KeyRequestTask = new class'EncryptionKeyRequestWebTask_X';
     KeyRequestTask.PlayerID = ReservationMessage.PartyLeaderID;
     KeyRequestTask.Message = Message;
     KeyRequestTask.Connection = Connection;
     KeyRequestTask.SendRequestFromServer(Beacon.GetListenAddress(), GetKeys_OnSucceeded_PrivateReservation, GetKeys_OnFailed);
     AddEncryptionKeyRequestTask(KeyRequestTask);
 }
 // End:0x1E8
 else
 {
     // End:0x1E8
     if(!HandlePrivateReservation(Connection, ReservationMessage))
     {
         Connection.Close();
     }
 }
 //return;    
}

protected function AddEncryptionKeyRequestTask(IsInTransientPackage KeyRequestTask)
{
 PendingKeyRequest.AddItem(KeyRequestTask);
 //return;    
}

protected function RemoveEncryptionKeyRequestTask(GetDefaultObject PlayerID)
{
 local editinline IsInTransientPackage KeyRequestTask;

 KeyRequestTask = GetEncryptionKeyRequestTaskByPlayerId(PlayerID);
 // End:0x42
 if(KeyRequestTask != none)
 {
     PendingKeyRequest.RemoveItem(KeyRequestTask);
 }
 //return;    
}

protected function GetAPlayerController GetEncryptionKeyRequestTaskByPlayerId(GetDefaultObject PlayerID)
{
 local int I, Index;

 Index = -1;
 I = 0;
 J0x1A:
 // End:0x93 [Loop If]
 if(I < PendingKeyRequest.Length)
 {
     // End:0x85
     if(PendingKeyRequest[I].PlayerID == PlayerID)
     {
         Index = I;
         // [Explicit Break]
         goto J0x93;
     }
     ++ I;
     J0x93:
     // [Loop Continue]
     goto J0x1A;
 }
 // End:0xA4
 if(Index < 0)
 {
     return none;
 }
 return PendingKeyRequest[Index];
 //return ReturnValue;    
}

protected function bool HandlePrivateReservation(class Connection, class Message)
{
 local array TempPlayers;

 LogInternal(("HandlePrivateReservation" @ "Message=") $ Message.GetDebugString(), 'Reservations', true);
 // End:0xDB
 if(bServerTraveling)
 {
     LogInternal("Server traveling, closing connection", 'Reservations', true);
     Beacon.CreateMessage(class'ReservationsTravelingMessage_X').Send(Connection);
     return false;
 }
 // End:0x16E
 if(Outer.GameSettings != none)
 {
     LogInternal("Already in private match", 'Reservations', true);
     Beacon.CreateMessage(class'ReservationsFullMessage_X').Send(Connection);
     return false;
 }
 bMatchStarted = true;
 GotoState('PrivateMatchStarting');
 UnknownLocal_384172057
 @NULL
 ""
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 @NULL
 // Failed to decompile this line:
     /* NativeFunctionToken NativeFunctionToken
     NativeFunctionToken AssertToken LocalVariableToken EndParmValueToken
     LocalVariableToken LocalVariableToken LocalVariableToken LocalVariableToken
     NativeFunctionToken LocalVariableToken NativeFunctionToken EndFunctionParmsToken
     LocalVariableToken LocalVariableToken NativeFunctionToken LocalVariableToken
     InstanceVariableToken AssertToken LocalVariableToken NothingToken
     LocalVariableToken LocalVariableToken DynamicArrayInsertToken NativeFunctionToken
     EndFunctionParmsToken LocalVariableToken LocalVariableToken NativeFunctionToken
     NothingToken LocalVariableToken LocalVariableToken  *
 // Index was out of range. Must be non-negative and less than the size of the collection.
 Parameter name: index */
}

protected function array AddPlayersFromReservationMessage(GetUtcTimeStamp ReservationMessage, class Connection)
{
 local array TempPlayers;
 local @NULL NewData, PlayerData;
 local int ReservationIdx;
 local bool bDisableCrossPlay;

 TempPlayers = Players;
 // End:0x5E
 if(AddReservationMessagePublic_X(ReservationMessage) != none)
 {
     bDisableCrossPlay = AddReservationMessagePublic_X(ReservationMessage).bDisableCrossPlay;
 }
 // End:0x352
 foreach ReservationMessage.Players(PlayerData,)
 {
     ReservationIdx = TempPlayers.Find('PlayerID', PlayerData.PlayerID);
     // End:0x1BE
     if(ReservationIdx == -1)
     {
         ReservationIdx = TempPlayers.Add(1);
         NewData.PlayerID = PlayerData.PlayerID;
         NewData.PlayerName = class'GameInfo'.static.SanitizePlayerName(PlayerData.PlayerName);
         NewData.PartyID = ReservationMessage.PartyLeaderID;
     }
     // End:0x1DB
     else
     {
         NewData = TempPlayers[ReservationIdx];
     }
     NewData.TimeoutTime = GetCurrentTime() + ReservationTimeout;
     // End:0x274
     if(!PlayerData.bRemotePlayer)
     {
         NewData.Status = 1;
         NewData.Connection = Connection;
     }
     NewData.Skill.Mu = PlayerData.SkillMu;
     NewData.Skill.Sigma = PlayerData.SkillSigma;
     NewData.bDisableCrossPlay = bDisableCrossPlay;
     TempPlayers[ReservationIdx] = NewData;        
 }    
 return TempPlayers;
 //return ReturnValue;    
}

protected function SetPlayers(const out array TempPlayers)
{
 local int PlayerIdx;

 // End:0xD2
 if(TempPlayers.Length > Players.Length)
 {
     PlayerIdx = Players.Length;
     J0x2D:
     // End:0xD2 [Loop If]
     if(PlayerIdx < TempPlayers.Length)
     {
         LogInternal((("Add player Name=" $ TempPlayers[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(TempPlayers[PlayerIdx].PlayerID), 'Reservations', true);
         ++ PlayerIdx;
         // [Loop Continue]
         goto J0x2D;
     }
 }
 Players = TempPlayers;
 OnReservationsUpdated();
 //return;    
}

protected function DisconnectExistingPlayers(GetUtcTimeStamp ReservationMessage)
{
 local @NULL PlayerData;

 // End:0x53
 foreach ReservationMessage.Players(PlayerData,)
 {
     DisconnectExistingPlayer(PlayerData.PlayerID);        
 }    
 //return;    
}

protected function DisconnectExistingPlayer(const out GetDefaultObject PlayerID)
{
 local class Controller;

 // End:0x30
 if(class'Online_X'.static.UniqueNetIDIsValid(PlayerID) == false)
 {
     return;
 }
 // End:0x146
 foreach class'WorldInfo'.static.GetWorldInfo().AllControllers(class'PlayerController', Controller)
 {
     // End:0x145
     if(Controller.PlayerReplicationInfo.UniqueId == PlayerID)
     {
         LogInternal("Diconnecting existing connection with same ID as new reservation. ID=" $ UniqueNetIdToString(PlayerID), 'Reservations', true);
         Controller.Destroy();
         // End:0x146
         break;
     }        
 }    
 //return;    
}

protected function NotAllPlayersJoined()
{
 LogInternal("Game did not fill up", 'Reservations', true);
 Beacon.CreateMessage(class'ReservationsTimedOutMessage_X').Broadcast();
 class'BugReport_X'.static.StaticSubmitBugReport("NotAllPlayersJoinedServer");
 Outer.ClearSettings();
 //return;    
}

protected function GetAPlayerController CreateReservationData(GetDefaultObject PlayerID, string PlayerName, optional @NULL PartyID, optional byte Status)
{
 local GetLanguageExtension Data;

 Data.PlayerID = PlayerID;
 Data.PlayerName = class'GameInfo'.static.SanitizePlayerName(PlayerName);
 Data.PartyID = ((class'Online_X'.static.UniqueNetIDIsValid(PartyID)) ? PartyID : PlayerID);
 Data.Status = Status;
 Data.TimeoutTime = GetCurrentTime() + ReservationTimeout;
 return Data;
 //return ReturnValue;    
}

function bool AllowSplitscreenJoin(class PrimaryPRI, GetDefaultObject PlayerID, string PlayerName)
{
 local int PrimaryPlayerIdx;
 local array TempPlayers;
 local IsInTransientPackage NewReservation;

 // End:0x24
 if(Outer.IsRankedMatch())
 {
     return false;
 }
 PrimaryPlayerIdx = Players.Find('PRI', PrimaryPRI);
 // End:0x141
 if(PrimaryPlayerIdx != -1)
 {
     NewReservation = CreateReservationData(PlayerID, PlayerName, Players[PrimaryPlayerIdx].PartyID, 1);
     TempPlayers = Players;
     TempPlayers.AddItem(NewReservation);
     // End:0x13C
     if(AssignTeams(Outer.GameSettings.NumPublicConnections / 2, TempPlayers))
     {
         SetPlayers(TempPlayers);
         return true;
     }
     // End:0x13E
     else
     {
         return false;
     }
 }
 // End:0x143
 else
 {
     return false;
 }
 //return ReturnValue;    
}

private final function HandleSkillSynced(GetAPlayerController SkillSystem, GetDefaultObject PlayerID, DumpUnreferencedAnims Error)
{
 SetTimer(0.10, false, 'UpdateTeams');
 //return;    
}

// Export UOnlineGameReservations_X::execAssignTeams(FFrame&, void* const)
native static function bool AssignTeams(int TeamSize, out array TestPlayers);

// Export UOnlineGameReservations_X::execAssignScrambledTeams(FFrame&, void* const)
native static function bool AssignScrambledTeams(int TeamSize, const out array< class > History, out array TestPlayers);

function AssignTeamsByPartySize()
{
 local array TestPlayers;

 // End:0xA9
 if(Outer.GameSettings != none)
 {
     TestPlayers = Players;
     class'OnlineGameReservations_AssignTeamsByParty_X'.static.AssignTeams(Outer.GameSettings.NumPublicConnections / 2, TestPlayers);
     SetPlayers(TestPlayers);
 }
 //return;    
}

function UpdateTeams()
{
 local array TestPlayers;

 // End:0x33
 if(bMatchStarted && Outer.IsRankedMatch())
 {
     return;
 }
 // End:0xCA
 if(Outer.GameSettings != none)
 {
     TestPlayers = Players;
     // End:0xCA
     if(AssignTeams(Outer.GameSettings.NumPublicConnections / 2, TestPlayers))
     {
         SetPlayers(TestPlayers);
     }
 }
 //return;    
}

protected function ScrambleTeams()
{
 local array TestPlayers;

 // End:0xA0
 if(Outer.GameSettings != none)
 {
     TestPlayers = Players;
     // End:0xA0
     if(AssignScrambledTeams(Outer.GameSettings.NumPublicConnections / 2, TeamPairHistories, TestPlayers))
     {
         SetPlayers(TestPlayers);
     }
 }
 //return;    
}

// Export UOnlineGameReservations_X::execRecordTeamHistory(FFrame&, void* const)
native static function RecordTeamHistory(const out array TestPlayers, out array< class > History);

function Reset()
{
 ClearReservations();
 ClearTeamHistory();
 GotoState('None');
 bMatchStarted = false;
 //return;    
}

function ClearReservations()
{
 local int PlayerIdx;
 local array<out bool> EmptyPlayers;

 PlayerIdx = 0;
 J0x0B:
 // End:0x44 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     CloseConnection(PlayerIdx);
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 SetPlayers(EmptyPlayers);
 //return;    
}

function ClearTeamHistory()
{
 bScrambleTeams = false;
 TeamPairHistories.Length = 0;
 //return;    
}

private final function HandleReservationDisconnected(class Connection)
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x111 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0x103
     if(Players[PlayerIdx].Connection == Connection)
     {
         LogInternal((("Reservation disconnected, Name=" $ Players[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[PlayerIdx].PlayerID), 'Reservations', true);
         RemoveReservationIndex(PlayerIdx);
         -- PlayerIdx;
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 //return;    
}

function bool IsCustomMatch()
{
 return false;
 //return ReturnValue;    
}

final function int GetNumReservedPlayers()
{
 local int PlayerIdx, Count;

 Count = 0;
 PlayerIdx = 0;
 J0x16:
 // End:0x78 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0x6A
     if(Players[PlayerIdx].Status != 0)
     {
         ++ Count;
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x16;
 }
 return Count;
 //return ReturnValue;    
}

final function bool IsFull()
{
 // End:0x21
 if(bSinglePlayerMatchmaking && Players.Length > 0)
 {
     return true;
 }
 // End:0x8E
 if((Outer.GameSettings != none) && GetNumReservedPlayers() >= Outer.GameSettings.NumPublicConnections)
 {
     return true;
 }
 // End:0x90
 else
 {
     return false;
 }
 //return ReturnValue;    
}

protected function bool IsNearlyFull()
{
 local int PlayerCount, NearlyFullCount;

 // End:0x21
 if(bSinglePlayerMatchmaking && Players.Length > 0)
 {
     return true;
 }
 // End:0xC6
 if(Outer.GameSettings != none)
 {
     PlayerCount = GetNumReservedPlayers();
     NearlyFullCount = Outer.GameSettings.NumPublicConnections;
     NearlyFullCount -= (NearlyFullCount / 3);
     return PlayerCount >= NearlyFullCount;
 }
 // End:0xC8
 else
 {
     return false;
 }
 //return ReturnValue;    
}

final function bool IsEmpty()
{
 return GetNumReservedPlayers() == 0;
 //return ReturnValue;    
}

final function bool HasJoiningPlayers()
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x97 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0x89
     if((Players[PlayerIdx].Status == 1) || Players[PlayerIdx].Status == 2)
     {
         return true;
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 return false;
 //return ReturnValue;    
}

function bool CanStartMatch()
{
 // End:0x24
 if(bSkipReservationCheck && Players.Length > 0)
 {
     return true;
 }
 // End:0xAE
 else
 {
     // End:0xAC
     if((Outer.GameSettings != none) && Outer.CurrentPlaylistId != 0)
     {
         // End:0x9E
         if(Outer.IsRankedMatch())
         {
             return IsFull();
         }
         // End:0xA9
         else
         {
             return IsNearlyFull();
         }
     }
     // End:0xAE
     else
     {
         return false;
     }
 }
 //return ReturnValue;    
}

final function bool HasGameStarted()
{
 return GetGRI().bGameStarted;
 //return ReturnValue;    
}

final function bool HasGameEnded()
{
 return GetGRI().bGameEnded;
 //return ReturnValue;    
}

function bool AllPlayersInGame()
{
 local int PlayerIdx;

 // End:0x12
 if(Players.Length == 0)
 {
     return false;
 }
 // End:0x56
 if(Players.Length != Outer.GameSettings.NumPublicConnections)
 {
     return false;
 }
 PlayerIdx = 0;
 J0x61:
 // End:0xBA [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0xAC
     if(Players[PlayerIdx].Status != 3)
     {
         return false;
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x61;
 }
 return true;
 //return ReturnValue;    
}

function bool AllowPlayerLogin(string Options, GetDefaultObject PlayerID)
{
 local int PlayerIdx;
 local string PlayerName;

 // End:0x22
 if(!bMatchStarted && !bSkipReservationCheck)
 {
     return false;
 }
 PlayerName = class'GameInfo'.static.DecodeURL(class'GameInfo'.static.ParseOption(Options, "Name"));
 PlayerName = class'GameInfo'.static.SanitizePlayerName(PlayerName);
 PlayerIdx = Players.Find('PlayerID', PlayerID);
 LogInternal(((((((("AllowPlayerLogin" @ "PlayerID=") $ UniqueNetIdToString(PlayerID)) @ "PlayerName=") $ PlayerName) @ "PlayerIdx=") $ string(PlayerIdx)) @ "NumPlayers=") $ string(Players.Length), 'Reservations', true);
 // End:0x231
 if(bSkipReservationCheck && PlayerIdx == -1)
 {
     // End:0x208
     if(Outer.GameSettings == none)
     {
         Outer.SetPlaylist(Outer.Playlists.NameToID('RankedTeamDoubles'));
     }
     PlayerIdx = AddSpecialReservation(PlayerID, PlayerName,, 2);
 }
 // End:0x347
 if(PlayerIdx != -1)
 {
     LogInternal("  PartyID=" $ UniqueNetIdToString(Players[PlayerIdx].PartyID), 'Reservations', true);
     Players[PlayerIdx].PlayerName = PlayerName;
     Players[PlayerIdx].Status = 2;
     CloseConnection(PlayerIdx);
     OnReservationsUpdated();
     Outer.DLC.SyncPlayerDLC(PlayerID);
     return true;
 }
 // End:0x349
 else
 {
     return false;
 }
 //return ReturnValue;    
}

function PlayerLoggedIn(string PRI)
{
 local int PlayerIdx;

 PlayerIdx = Players.Find('PlayerID', PRI.UniqueId);
 // End:0x67
 if(PlayerIdx == -1)
 {
     PlayerIdx = Players.Add(1);
 }
 Players[PlayerIdx].PlayerName = PRI.PlayerName;
 Players[PlayerIdx].PlayerID = PRI.UniqueId;
 Players[PlayerIdx].Status = 3;
 Players[PlayerIdx].TimeoutTime = 0.0;
 Players[PlayerIdx].PRI = PRI;
 UnknownLocal_475999769
 @NULL
 @NULL    ;
 .Find(, @NULL@NULL;
 @NULL
 PlayerIdx
 )
 OnReservationsUpdated();
 //return;    
}

function PlayerLoggedOut(string PRI)
{
 local int PlayerIdx;

 PlayerIdx = Players.Find('PlayerID', PRI.UniqueId);
 // End:0x122
 if(PlayerIdx != -1)
 {
     Players[PlayerIdx].PRI = none;
     // End:0x122
     if(!bServerTraveling)
     {
         LogInternal((("Player logged out, Name=" $ Players[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[PlayerIdx].PlayerID), 'Reservations', true);
         RemoveReservationIndex(PlayerIdx);
     }
 }
 UnknownLocal_475999769
 @NULL
 @NULL    ;
 .Find(, @NULL@NULL;
 @NULL
}

function RemoveReservation(GetDefaultObject PlayerID)
{
 local int PlayerIdx;

 PlayerIdx = Players.Find('PlayerID', PlayerID);
 // End:0xE4
 if(PlayerIdx != -1)
 {
     LogInternal((("Forcefully removing reservation, Name=" $ Players[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[PlayerIdx].PlayerID), 'Reservations', true);
     RemoveReservationIndex(PlayerIdx);
 }
 //return;    
}

protected function HandleTeamChanged(string PRI)
{
 local int PlayerIdx;

 // End:0xCB
 if(PRI.GetTeamNum() != 255)
 {
     PlayerIdx = Players.Find('PlayerID', PRI.UniqueId);
     // End:0xCB
     if(PlayerIdx != -1)
     {
         Players[PlayerIdx].Team = PRI.GetTeamNum();
         OnReservationsUpdated();
     }
 }
 //return;    
}

protected function int AddSpecialReservation(GetDefaultObject PlayerID, string PlayerName, optional @NULL PartyID, optional byte Status)
{
 local int PlayerIdx;

 PlayerIdx = Players.Find('PlayerID', PlayerID);
 // End:0xDD
 if(PlayerIdx == -1)
 {
     LogInternal((("Adding reservation Name=" $ PlayerName) @ "ID=") $ UniqueNetIdToString(PlayerID), 'Reservations', true);
     PlayerIdx = Players.AddItem(CreateReservationData(PlayerID, PlayerName, PartyID, Status));
     CheckReservationTimeout();
 }
 // End:0x19D
 else
 {
     Players[PlayerIdx].PlayerID = PlayerID;
     Players[PlayerIdx].PlayerName = PlayerName;
     Players[PlayerIdx].PartyID = PartyID;
     Players[PlayerIdx].Status = Status;
 }
 OnReservationsUpdated();
 return PlayerIdx;
 //return ReturnValue;    
}

protected function RemoveReservationIndex(int Index)
{
 LogInternal((("Removing reservation Name=" $ Players[Index].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[Index].PlayerID), 'Reservations', true);
 CloseConnection(Index);
 // End:0x11E
 if(Outer.IsRankedMatch())
 {
     LogInternal("  Keeping reservation for ranked match", 'Reservations', true);
     Players[Index].Status = 0;
 }
 // End:0x133
 else
 {
     Players.Remove(Index, 1);
 }
 OnReservationsUpdated();
 //return;    
}

protected function CloseConnection(int Index)
{
 // End:0xD5
 if(Players[Index].Connection != none)
 {
     UnknownLocal_377763097
     @NULL
     @NULL
     // Failed to decompile this line:
         /* NativeFunctionToken LocalVariableToken
         LocalVariableToken StringConstToken LocalVariableToken LocalVariableToken
         LocalVariableToken LocalVariableToken LocalVariableToken LocalVariableToken
         NativeFunctionToken LocalVariableToken LocalVariableToken LocalVariableToken
         NativeFunctionToken ReturnToken LocalVariableToken LocalVariableToken
         EndFunctionParmsToken LocalVariableToken LocalVariableToken NativeFunctionToken
         LocalVariableToken LocalVariableToken EndOfScriptToken LocalVariableToken
         StopToken LocalVariableToken LocalVariableToken  *
     // Index was out of range. Must be non-negative and less than the size of the collection.
     Parameter name: index
     // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
     // 1 & Type:If Position:213 */
}

function SetServerTraveling(bool bTraveling)
{
 local int PlayerIdx;

 bServerTraveling = bTraveling;
 LogInternal("SetServerTraveling" @ string(bTraveling), 'Reservations', true);
 // End:0x211
 if(bServerTraveling)
 {
     ClearTimer('CheckReservationTimeout');
     SyncSkills();
     // End:0xAD
     if(bScrambleTeams)
     {
         bScrambleTeams = false;
         RecordTeamHistory(Players, TeamPairHistories);
         ScrambleTeams();
     }
     PlayerIdx = 0;
     J0xB8:
     // End:0x1EA [Loop If]
     if(PlayerIdx < Players.Length)
     {
         Players[PlayerIdx].Status = 1;
         Players[PlayerIdx].TimeoutTime = 0.0;
         Players[PlayerIdx].PRI = none;
         // End:0x1DC
         if(Players[PlayerIdx].Team != 255)
         {
             Players[PlayerIdx].Team = ((Players[PlayerIdx].Team == 0) ? 1 : 0);
         }
         ++ PlayerIdx;
         // [Loop Continue]
         goto J0xB8;
     }
     OnReservationsUpdated();
     SetTimer(10.0, false, 'HackForceNotServerTravelling');
 }
 // End:0x22F
 else
 {
     ClearTimer('HackForceNotServerTravelling');
     StartReservationTimeout();
 }
 //return;    
}

protected function HackForceNotServerTravelling()
{
 // End:0x7A
 if(bServerTraveling)
 {
     WarnInternal("HAD TO USE HACK TO TURN OFF SERVER TRAVELLING");
     SetServerTraveling(false);
     class'BugReport_X'.static.StaticSubmitBugReport("ServerTravelHack");
 }
 //return;    
}

protected function SyncSkills()
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x8C [Loop If]
 if(PlayerIdx < Players.Length)
 {
     Outer.Skill.SyncPlayerSkill(Players[PlayerIdx].PlayerID);
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 //return;    
}

protected function StartReservationTimeout()
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x6D [Loop If]
 if(PlayerIdx < Players.Length)
 {
     Players[PlayerIdx].TimeoutTime = GetCurrentTime() + ReservationTimeout;
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 SetTimer(ReservationTimeout + 1.0, false, 'CheckReservationTimeout');
 //return;    
}

protected function CheckReservationTimeout()
{
 local int PlayerIdx;
 local float CurrentTime;
 local bool bPlayersJoining;
 local float NextCheckTime;

 CurrentTime = GetCurrentTime();
 NextCheckTime = CurrentTime + ReservationTimeout;
 LogInternal("CheckReservationTimeout", 'Reservations', true);
 PlayerIdx = Players.Length - 1;
 J0x6E:
 // End:0x2B3 [Loop If]
 if(PlayerIdx >= 0)
 {
     // End:0x2A5
     if(Players[PlayerIdx].Status != 3)
     {
         LogInternal((("  Check" @ string(Players[PlayerIdx].TimeoutTime)) @ string(CurrentTime)) @ string(Players[PlayerIdx].TimeoutTime - CurrentTime), 'Reservations', true);
         // End:0x25E
         if(Players[PlayerIdx].TimeoutTime <= CurrentTime)
         {
             LogInternal((((((("Reservation never joined, Name=" $ Players[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[PlayerIdx].PlayerID)) @ "TimeoutTime=") $ string(Players[PlayerIdx].TimeoutTime)) @ "CurrentTime=") $ string(CurrentTime), 'Reservations', true);
             RemoveReservationIndex(PlayerIdx);
         }
         // End:0x2A5
         else
         {
             NextCheckTime = FMin(NextCheckTime, Players[PlayerIdx].TimeoutTime);
             bPlayersJoining = true;
         }
     }
     -- PlayerIdx;
     // [Loop Continue]
     goto J0x6E;
 }
 // End:0x31D
 if(bPlayersJoining)
 {
     // DebugMode:False
     assert(((NextCheckTime - CurrentTime) + 1.0) > 0.0);
     SetTimer(FMax((NextCheckTime - CurrentTime) + 1.0, 1.0), false, 'CheckReservationTimeout');
 }
 //return;    
}

protected function OnReservationsUpdated()
{
 // End:0x33
 if(!IsTimerActive('NotifyReservationsUpdated'))
 {
     SetTimer(0.050, false, 'NotifyReservationsUpdated');
 }
 //return;    
}

protected function NotifyReservationsUpdated()
{
 Outer.UpdateGameSettingsPlayerCount(Players.Length);
 EventReservationsUpdated();
 //return;    
}

function GetPlayerCounts(out int Team0Reserved, out int Team0Joined, out int Team1Reserved, out int Team1Joined)
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x102 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     switch(Players[PlayerIdx].Team)
     {
         // End:0xA2
         case 0:
             ++ Team0Reserved;
             // End:0x9F
             if(Players[PlayerIdx].Status == 3)
             {
                 ++ Team0Joined;
             }
             // End:0xF4
             break;
         // End:0xF1
         case 1:
             ++ Team1Reserved;
             // End:0xEE
             if(Players[PlayerIdx].Status == 3)
             {
                 ++ Team1Joined;
             }
             // End:0xF4
             break;
         // End:0xFFFF
         default:
             ++ PlayerIdx;
             // [Loop Continue]
             goto J0x0B;
         }
         //return;            
}

final function byte GetExclusivePlatform()
{
 local int PlayerIdx;

 PlayerIdx = 0;
 J0x0B:
 // End:0x95 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0x87
     if(Players[PlayerIdx].bDisableCrossPlay)
     {
         return Players[PlayerIdx].PlayerID.Platform;
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 return 0;
 //return ReturnValue;    
}

final function bool CanAcceptReservationsForPlatform(class Message)
{
 local byte ExclusivePlatform;

 ExclusivePlatform = GetExclusivePlatform();
 // End:0x77
 if(((ExclusivePlatform == 0) || !Message.bDisableCrossPlay) || Message.Players.Length == 0)
 {
     return true;
 }
 return Message.Players[0].PlayerID.Platform == ExclusivePlatform;
 //return ReturnValue;    
}

final function array GetPlayerPlatforms()
{
 local int PlayerIdx;
 local array<coerce out GetAPlayerController> Platforms;

 PlayerIdx = 0;
 J0x0B:
 // End:0xC7 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     // End:0xB9
     if(Platforms.Find(Players[PlayerIdx].PlayerID.Platform) == -1)
     {
         Platforms.AddItem(Players[PlayerIdx].PlayerID.Platform);
     }
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x0B;
 }
 return Platforms;
 //return ReturnValue;    
}

final function string GetPlatformsString(const out array<coerce out GetAPlayerController> Platforms)
{
 local byte Platform;
 local array PlatformString;

 // End:0x4D
 foreach Platforms(Platform,)
 {
     PlatformString.AddItem(OnlineSub.GetPlatformName(Platform));        
 }    
 return JoinArrayStr(PlatformString, ",");
 //return ReturnValue;    
}

final function string GetPlayersPlatformsString()
{
 local array<coerce out GetAPlayerController> Platforms;

 Platforms = GetPlayerPlatforms();
 return GetPlatformsString(Platforms);
 //return ReturnValue;    
}

final function byte GetTeamNum(GetDefaultObject PlayerID)
{
 local int PlayerIdx;

 PlayerIdx = Players.Find('PlayerID', PlayerID);
 // End:0x63
 if(PlayerIdx != -1)
 {
     return Players[PlayerIdx].Team;
 }
 return 255;
 //return ReturnValue;    
}

final function GetAPlayerController GetPartyID(GetDefaultObject PlayerID)
{
 local int PlayerIdx;
 local @NULL EmptyID;

 PlayerIdx = Players.Find('PlayerID', PlayerID);
 // End:0x63
 if(PlayerIdx != -1)
 {
     return Players[PlayerIdx].PartyID;
 }
 return EmptyID;
 //return ReturnValue;    
}

function SetParty(GetDefaultObject MemberId, @NULL PartyID)
{
 local int PlayerIdx;

 // End:0x43
 if(!UniqueNetIDIsValid(MemberId))
 {
     WarnInternal("SetParty called with invalid MemberID");
     return;
 }
 // End:0x85
 if(!UniqueNetIDIsValid(PartyID))
 {
     WarnInternal("SetParty called with invalid PartyID");
     return;
 }
 PlayerIdx = Players.Find('PlayerID', MemberId);
 // End:0x1EF
 if(PlayerIdx != -1)
 {
     // End:0x166
     if(UniqueNetIDIsValid(Outer.CustomMatchOwner) && Players[PlayerIdx].PartyID == Outer.CustomMatchOwner)
     {
         Outer.UpdateCustomMatchOwner(PartyID);
     }
     LogInternal(((("SetParty" @ "PlayerID=") $ UniqueNetIdToString(MemberId)) @ "PartyID=") $ UniqueNetIdToString(PartyID), 'Reservations', true);
     Players[PlayerIdx].PartyID = PartyID;
 }
 //return;    
}

function bool HasSplitscreenPlayers()
{
 local int I, J;
 local @NULL TempPlayerID, ComparePlayerID;

 I = 0;
 J0x0B:
 // End:0x12B [Loop If]
 if(I < Players.Length)
 {
     TempPlayerID = Players[I].PlayerID;
     TempPlayerID.SplitscreenID = 0;
     J = I + 1;
     J0x88:
     // End:0x11D [Loop If]
     if(J < Players.Length)
     {
         ComparePlayerID = Players[J].PlayerID;
         ComparePlayerID.SplitscreenID = 0;
         // End:0x10F
         if(ComparePlayerID == TempPlayerID)
         {
             return true;
         }
         ++ J;
         // [Loop Continue]
         goto J0x88;
     }
     ++ I;
     // [Loop Continue]
     goto J0x0B;
 }
 return false;
 //return ReturnValue;    
}

function OnNewGameInfoCreated(GetLanguageExtension Game)
{
 //return;    
}

simulated function PrintDebugInfo(GetAPlayerController Drawer)
{
 local int PlayerIdx;

 super(Object).PrintDebugInfo(Drawer);
 Drawer.PrintProperty("ExclusivePlatform", string(GetExclusivePlatform()));
 Drawer.PrintProperty("PlayerPlatforms", GetPlayersPlatformsString());
 PlayerIdx = 0;
 J0x96:
 // End:0x261 [Loop If]
 if(PlayerIdx < Players.Length)
 {
     Drawer.PrintProperty(("Players[" $ string(PlayerIdx)) $ "]", (((((((((("Name=" $ Players[PlayerIdx].PlayerName) @ "ID=") $ UniqueNetIdToString(Players[PlayerIdx].PlayerID)) @ "Status=") $ string(Players[PlayerIdx].Status)) @ "TimeRemaining=") $ string(Players[PlayerIdx].TimeoutTime - GetCurrentTime())) @ "PartyLeaderID=") $ UniqueNetIdToString(Players[PlayerIdx].PartyID)) @ "bDisableCrossPlay=") $ string(Players[PlayerIdx].bDisableCrossPlay));
     ++ PlayerIdx;
     // [Loop Continue]
     goto J0x96;
 }
 //return;    
}

state PrivateMatchBase
{
 function bool IsCustomMatch()
 {
     return true;
     //return ReturnValue;        
 }
 stop;    
}

state PrivateMatchStarting extends PrivateMatchBase
{
 function OnNewGameInfoCreated(GetLanguageExtension Game)
 {
     LogInternal("Starting private match after new game was created!", 'Reservations', true);
     CreateReadyMessage().Broadcast();
     GotoState('PrivateMatch');
     //return;        
 }

 private final function HandleReservationDisconnected(class Connection)
 {
     LogInternal("Connection disconnected during private match setup, removing reservation", 'Reservations', true);
     Reset();
     //return;        
 }

 function bool AllowPlayerLogin(string Options, GetDefaultObject PlayerID)
 {
     return false;
     //return ReturnValue;        
 }
 stop;    
}

state PrivateMatch extends PrivateMatchBase
{
 protected function bool HandlePublicReservation(class Connection, class Message)
 {
     local array TempPlayers;

     // End:0x107
     if(!Message.Settings.Password ~= Outer.CustomMatch.Password)
     {
         Beacon.CreateMessage(class'ReservationsPasswordMessage_X').SetReason(((Len(Message.Settings.Password) > 0) ? 1 : 0)).Send(Connection);
         return false;
     }
     // End:0x1FE
     if((!Outer.CustomMatch.bPublic && Message.Settings.bFriendJoin) && Players.Find('PlayerID', Message.PartyLeaderID) == -1)
     {
         Beacon.CreateMessage(class'ReservationsPrivateMessage_X').Send(Connection);
         return false;
     }
     TempPlayers = AddPlayersFromReservationMessage(Message, Connection);
     // End:0x3B9
     if(!bSkipReservationCheck && TempPlayers.Length > Outer.GameSettings.NumPublicConnections)
     {
         LogInternal((("Reservations full, TempPlayers=" $ string(TempPlayers.Length)) @ "NumPublicConnections=") $ string(Outer.GameSettings.NumPublicConnections), 'Reservations', true);
         // End:0x370
         if(!Message.Settings.bFriendJoin)
         {
             class'BugReport_X'.static.StaticSubmitBugReport("ReservationsFullServer");
         }
         Beacon.CreateMessage(class'ReservationsFullMessage_X').Send(Connection);
         return false;
     }
     DisconnectExistingPlayers(Message);
     UnknownLocal_398524441
     @NULL
     ""
     @NULL
     @NULL
     @NULL
     @NULL
     @NULL
     TempPlayers
     )
     CheckReservationTimeout();
     CreateReadyMessage().Broadcast();
     return true;
 }

 function bool AllowPlayerLogin(string Options, GetDefaultObject PlayerID)
 {
     AddSpecialReservation(PlayerID, "");
     return super(OnlineGameReservations_X).AllowPlayerLogin(Options, PlayerID);
     //return ReturnValue;        
 }

 function bool AllowSplitscreenJoin(class PrimaryPRI, GetDefaultObject PlayerID, string PlayerName)
 {
     local int PrimaryPlayerIdx;

     PrimaryPlayerIdx = Players.Find('PRI', PrimaryPRI);
     // End:0xC7
     if(PrimaryPlayerIdx != -1)
     {
         // End:0xC4
         if(Players.Length < Outer.GameSettings.NumPublicConnections)
         {
             AddSpecialReservation(PlayerID, PlayerName, Players[PrimaryPlayerIdx].PartyID, 1);
             return true;
         }
     }
     // End:0xC9
     else
     {
         return false;
     }
     //return ReturnValue;        
 }

 function bool AllPlayersInGame()
 {
     local int PlayerIdx;

     // End:0x12
     if(Players.Length == 0)
     {
         return false;
     }
     PlayerIdx = 0;
     J0x1D:
     // End:0x76 [Loop If]
     if(PlayerIdx < Players.Length)
     {
         // End:0x68
         if(Players[PlayerIdx].Status != 3)
         {
             return false;
         }
         ++ PlayerIdx;
         // [Loop Continue]
         goto J0x1D;
     }
     return true;
     //return ReturnValue;        
 }
 stop;    
}
*/