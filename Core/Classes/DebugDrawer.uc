/*******************************************************************************
 * DebugDrawer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
 class DebugDrawer extends Object
 native;

 /*
var() @NULL DefaultTextColor;
var() bool bSilent;
var() bool bPrintActorsInline;
var protectedwrite transient int Indentation;
var protectedwrite transient string IndentationString;
var protected transient array<float> PrintedObjects;
var protected transient array<float> QueuedObjects;
var protected transient int PrintObjectCount;
var delegate<@NULL> __LogFunc__Delegate;

delegate LogFunc(coerce string str)
{
 LogInternal(str, 'Debug', bSilent);
 //return;    
}

function bool ShouldDisplayDebug(name Category)
{
 return true;
 //return ReturnValue;    
}

event DebugObject(coerce string Title, Subsystem ForObj)
{
 // End:0x19
 if(PrintObjectCount == 0)
 {
     PrintSeperater();
 }
 // End:0x143
 if((ForObj != none) && PrintedObjects.Find(ForObj) == -1)
 {
     // End:0xC4
     if(((PrintObjectCount > 0) && !bPrintActorsInline) && ForObj.IsA('Actor'))
     {
         QueuedObjects.AddItem(ForObj);
         PrintObject(Title, ForObj);
     }
     // End:0x140
     else
     {
         PrintObject(Title, ForObj);
         PrintedObjects.AddItem(ForObj);
         StartSection();
         ++ PrintObjectCount;
         ForObj.PrintDebugInfo(self);
         -- PrintObjectCount;
         EndSection();
     }
 }
 // End:0x16E
 else
 {
     // End:0x16E
     if(PrintObjectCount > 0)
     {
         PrintObject(Title, ForObj);
     }
 }
 // End:0x1C6
 if((PrintObjectCount == 0) && QueuedObjects.Length > 0)
 {
     ForObj = QueuedObjects[0];
     QueuedObjects.Remove(0, 1);
     DebugObject("", ForObj);
 }
 //return;    
}

event DebugArrayObject(coerce string Title, int Index, Subsystem ForObj)
{
 DebugObject(((Title $ "[") $ string(Index)) $ "]", ForObj);
 //return;    
}

event PrintSeperater()
{
 LogFunc("");
 //return;    
}

event PrintObject(coerce string Title, Subsystem ForObj)
{
 // End:0x77
 if(Len(Title) > 0)
 {
     PrintProperty(Title, ((ForObj != none) ? ((string(ForObj) $ " (") $ string(ForObj.GetRealArchetypeName())) $ ")" : "none"));
 }
 // End:0xD2
 else
 {
     PrintText(((ForObj != none) ? ((string(ForObj) $ " (") $ string(ForObj.GetRealArchetypeName())) $ ")" : "none"));
 }
 //return;    
}

event StartSection()
{
 ++ Indentation;
 IndentationString = IndentationString $ "  ";
 //return;    
}

event EndSection()
{
 Indentation = Max(Indentation - 1, 0);
 IndentationString = Left(IndentationString, Indentation * 2);
 //return;    
}

event PrintProperty(coerce string PropertyName, coerce string Value)
{
 PrintText((PropertyName $ ": ") $ Value);
 //return;    
}

event PrintArrayProperty(coerce string PropertyName, int Index, coerce string Value)
{
 PrintProperty(((PropertyName $ "[") $ string(Index)) $ "]", Value);
 //return;    
}

function PrintText(coerce string Text, optional @NULL InColor)
{
 InColor = DefaultTextColor;
 LogFunc(IndentationString $ Text);
 //return;    
}

function Reset()
{
 Indentation = 0;
 IndentationString = "";
 PrintedObjects.Length = 0;
 QueuedObjects.Length = 0;
 PrintObjectCount = 0;
 //return;    
}
*/